// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go
//
// Generated by this command:
//
//	mockgen -source adapter.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/hasansino/go42/internal/chat/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockserviceAccessor is a mock of serviceAccessor interface.
type MockserviceAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockserviceAccessorMockRecorder
	isgomock struct{}
}

// MockserviceAccessorMockRecorder is the mock recorder for MockserviceAccessor.
type MockserviceAccessorMockRecorder struct {
	mock *MockserviceAccessor
}

// NewMockserviceAccessor creates a new mock instance.
func NewMockserviceAccessor(ctrl *gomock.Controller) *MockserviceAccessor {
	mock := &MockserviceAccessor{ctrl: ctrl}
	mock.recorder = &MockserviceAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceAccessor) EXPECT() *MockserviceAccessorMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockserviceAccessor) CreateRoom(ctx context.Context, data *domain.CreateRoomData, creator domain.UserInfo) (*domain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, data, creator)
	ret0, _ := ret[0].(*domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockserviceAccessorMockRecorder) CreateRoom(ctx, data, creator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockserviceAccessor)(nil).CreateRoom), ctx, data, creator)
}

// GetRoom mocks base method.
func (m *MockserviceAccessor) GetRoom(ctx context.Context, roomID string) (*domain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, roomID)
	ret0, _ := ret[0].(*domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockserviceAccessorMockRecorder) GetRoom(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockserviceAccessor)(nil).GetRoom), ctx, roomID)
}

// JoinRoom mocks base method.
func (m *MockserviceAccessor) JoinRoom(ctx context.Context, roomID string, client *domain.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRoom", ctx, roomID, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRoom indicates an expected call of JoinRoom.
func (mr *MockserviceAccessorMockRecorder) JoinRoom(ctx, roomID, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRoom", reflect.TypeOf((*MockserviceAccessor)(nil).JoinRoom), ctx, roomID, client)
}

// LeaveRoom mocks base method.
func (m *MockserviceAccessor) LeaveRoom(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveRoom", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveRoom indicates an expected call of LeaveRoom.
func (mr *MockserviceAccessorMockRecorder) LeaveRoom(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveRoom", reflect.TypeOf((*MockserviceAccessor)(nil).LeaveRoom), ctx, clientID)
}

// ListRooms mocks base method.
func (m *MockserviceAccessor) ListRooms(ctx context.Context, roomType string) ([]*domain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRooms", ctx, roomType)
	ret0, _ := ret[0].([]*domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRooms indicates an expected call of ListRooms.
func (mr *MockserviceAccessorMockRecorder) ListRooms(ctx, roomType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRooms", reflect.TypeOf((*MockserviceAccessor)(nil).ListRooms), ctx, roomType)
}

// RegisterClient mocks base method.
func (m *MockserviceAccessor) RegisterClient(ctx context.Context, client *domain.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterClient", ctx, client)
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockserviceAccessorMockRecorder) RegisterClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockserviceAccessor)(nil).RegisterClient), ctx, client)
}

// SendMessage mocks base method.
func (m *MockserviceAccessor) SendMessage(ctx context.Context, clientID string, data *domain.SendMessageData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, clientID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockserviceAccessorMockRecorder) SendMessage(ctx, clientID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockserviceAccessor)(nil).SendMessage), ctx, clientID, data)
}

// UnregisterClient mocks base method.
func (m *MockserviceAccessor) UnregisterClient(ctx context.Context, clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterClient", ctx, clientID)
}

// UnregisterClient indicates an expected call of UnregisterClient.
func (mr *MockserviceAccessorMockRecorder) UnregisterClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterClient", reflect.TypeOf((*MockserviceAccessor)(nil).UnregisterClient), ctx, clientID)
}
