// Code generated by MockGen. DO NOT EDIT.
// Source: accessors.go
//
// Generated by this command:
//
//	mockgen -source accessors.go -package mocks -destination mocks/accessors.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo"
	gomock "go.uber.org/mock/gomock"
)

// MockproviderAccessor is a mock of providerAccessor interface.
type MockproviderAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockproviderAccessorMockRecorder
	isgomock struct{}
}

// MockproviderAccessorMockRecorder is the mock recorder for MockproviderAccessor.
type MockproviderAccessorMockRecorder struct {
	mock *MockproviderAccessor
}

// NewMockproviderAccessor creates a new mock instance.
func NewMockproviderAccessor(ctrl *gomock.Controller) *MockproviderAccessor {
	mock := &MockproviderAccessor{ctrl: ctrl}
	mock.recorder = &MockproviderAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproviderAccessor) EXPECT() *MockproviderAccessorMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockproviderAccessor) Register(r *echo.Group) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", r)
}

// Register indicates an expected call of Register.
func (mr *MockproviderAccessorMockRecorder) Register(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockproviderAccessor)(nil).Register), r)
}
