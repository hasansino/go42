// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: example.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExampleService_ListFruits_FullMethodName  = "/grpc.ExampleService/ListFruits"
	ExampleService_GetFruit_FullMethodName    = "/grpc.ExampleService/GetFruit"
	ExampleService_CreateFruit_FullMethodName = "/grpc.ExampleService/CreateFruit"
	ExampleService_UpdateFruit_FullMethodName = "/grpc.ExampleService/UpdateFruit"
	ExampleService_DeleteFruit_FullMethodName = "/grpc.ExampleService/DeleteFruit"
)

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	ListFruits(ctx context.Context, in *ListFruitsRequest, opts ...grpc.CallOption) (*ListFruitsResponse, error)
	GetFruit(ctx context.Context, in *GetFruitRequest, opts ...grpc.CallOption) (*Fruit, error)
	CreateFruit(ctx context.Context, in *CreateFruitRequest, opts ...grpc.CallOption) (*CreateFruitResponse, error)
	UpdateFruit(ctx context.Context, in *UpdateFruitRequest, opts ...grpc.CallOption) (*UpdateFruitResponse, error)
	DeleteFruit(ctx context.Context, in *DeleteFruitRequest, opts ...grpc.CallOption) (*DeleteFruitResponse, error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) ListFruits(ctx context.Context, in *ListFruitsRequest, opts ...grpc.CallOption) (*ListFruitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFruitsResponse)
	err := c.cc.Invoke(ctx, ExampleService_ListFruits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) GetFruit(ctx context.Context, in *GetFruitRequest, opts ...grpc.CallOption) (*Fruit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Fruit)
	err := c.cc.Invoke(ctx, ExampleService_GetFruit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) CreateFruit(ctx context.Context, in *CreateFruitRequest, opts ...grpc.CallOption) (*CreateFruitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFruitResponse)
	err := c.cc.Invoke(ctx, ExampleService_CreateFruit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) UpdateFruit(ctx context.Context, in *UpdateFruitRequest, opts ...grpc.CallOption) (*UpdateFruitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFruitResponse)
	err := c.cc.Invoke(ctx, ExampleService_UpdateFruit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) DeleteFruit(ctx context.Context, in *DeleteFruitRequest, opts ...grpc.CallOption) (*DeleteFruitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFruitResponse)
	err := c.cc.Invoke(ctx, ExampleService_DeleteFruit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility.
type ExampleServiceServer interface {
	ListFruits(context.Context, *ListFruitsRequest) (*ListFruitsResponse, error)
	GetFruit(context.Context, *GetFruitRequest) (*Fruit, error)
	CreateFruit(context.Context, *CreateFruitRequest) (*CreateFruitResponse, error)
	UpdateFruit(context.Context, *UpdateFruitRequest) (*UpdateFruitResponse, error)
	DeleteFruit(context.Context, *DeleteFruitRequest) (*DeleteFruitResponse, error)
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExampleServiceServer struct{}

func (UnimplementedExampleServiceServer) ListFruits(context.Context, *ListFruitsRequest) (*ListFruitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFruits not implemented")
}
func (UnimplementedExampleServiceServer) GetFruit(context.Context, *GetFruitRequest) (*Fruit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFruit not implemented")
}
func (UnimplementedExampleServiceServer) CreateFruit(context.Context, *CreateFruitRequest) (*CreateFruitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFruit not implemented")
}
func (UnimplementedExampleServiceServer) UpdateFruit(context.Context, *UpdateFruitRequest) (*UpdateFruitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFruit not implemented")
}
func (UnimplementedExampleServiceServer) DeleteFruit(context.Context, *DeleteFruitRequest) (*DeleteFruitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFruit not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}
func (UnimplementedExampleServiceServer) testEmbeddedByValue()                        {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	// If the following call pancis, it indicates UnimplementedExampleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_ListFruits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFruitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ListFruits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_ListFruits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ListFruits(ctx, req.(*ListFruitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_GetFruit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFruitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).GetFruit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_GetFruit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).GetFruit(ctx, req.(*GetFruitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_CreateFruit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFruitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).CreateFruit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_CreateFruit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).CreateFruit(ctx, req.(*CreateFruitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_UpdateFruit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFruitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).UpdateFruit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_UpdateFruit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).UpdateFruit(ctx, req.(*UpdateFruitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_DeleteFruit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFruitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).DeleteFruit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_DeleteFruit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).DeleteFruit(ctx, req.(*DeleteFruitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFruits",
			Handler:    _ExampleService_ListFruits_Handler,
		},
		{
			MethodName: "GetFruit",
			Handler:    _ExampleService_GetFruit_Handler,
		},
		{
			MethodName: "CreateFruit",
			Handler:    _ExampleService_CreateFruit_Handler,
		},
		{
			MethodName: "UpdateFruit",
			Handler:    _ExampleService_UpdateFruit_Handler,
		},
		{
			MethodName: "DeleteFruit",
			Handler:    _ExampleService_DeleteFruit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
