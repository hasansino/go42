// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber.go
//
// Generated by this command:
//
//	mockgen -source subscriber.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/hasansino/go42/internal/example/models"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
	isgomock struct{}
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// SaveFruitEventLog mocks base method.
func (m *Mockrepository) SaveFruitEventLog(ctx context.Context, event *models.FruitEventLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFruitEventLog", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFruitEventLog indicates an expected call of SaveFruitEventLog.
func (mr *MockrepositoryMockRecorder) SaveFruitEventLog(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFruitEventLog", reflect.TypeOf((*Mockrepository)(nil).SaveFruitEventLog), ctx, event)
}

// WithTransaction mocks base method.
func (m *Mockrepository) WithTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockrepositoryMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*Mockrepository)(nil).WithTransaction), ctx, fn)
}

// Mocksubscriber is a mock of subscriber interface.
type Mocksubscriber struct {
	ctrl     *gomock.Controller
	recorder *MocksubscriberMockRecorder
	isgomock struct{}
}

// MocksubscriberMockRecorder is the mock recorder for Mocksubscriber.
type MocksubscriberMockRecorder struct {
	mock *Mocksubscriber
}

// NewMocksubscriber creates a new mock instance.
func NewMocksubscriber(ctrl *gomock.Controller) *Mocksubscriber {
	mock := &Mocksubscriber{ctrl: ctrl}
	mock.recorder = &MocksubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksubscriber) EXPECT() *MocksubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *Mocksubscriber) Subscribe(ctx context.Context, topic string, handler func(context.Context, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MocksubscriberMockRecorder) Subscribe(ctx, topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*Mocksubscriber)(nil).Subscribe), ctx, topic, handler)
}
