// Code generated by MockGen. DO NOT EDIT.
// Source: example.go
//
// Generated by this command:
//
//	mockgen -source example.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/hasansino/go42/internal/example/models"
	domain "github.com/hasansino/go42/internal/outbox/domain"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
	isgomock struct{}
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CreateFruit mocks base method.
func (m *Mockrepository) CreateFruit(ctx context.Context, fruit *models.Fruit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFruit", ctx, fruit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFruit indicates an expected call of CreateFruit.
func (mr *MockrepositoryMockRecorder) CreateFruit(ctx, fruit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruit", reflect.TypeOf((*Mockrepository)(nil).CreateFruit), ctx, fruit)
}

// DeleteFruit mocks base method.
func (m *Mockrepository) DeleteFruit(ctx context.Context, fruit *models.Fruit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFruit", ctx, fruit)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFruit indicates an expected call of DeleteFruit.
func (mr *MockrepositoryMockRecorder) DeleteFruit(ctx, fruit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFruit", reflect.TypeOf((*Mockrepository)(nil).DeleteFruit), ctx, fruit)
}

// GetFruitByID mocks base method.
func (m *Mockrepository) GetFruitByID(ctx context.Context, id int) (*models.Fruit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFruitByID", ctx, id)
	ret0, _ := ret[0].(*models.Fruit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruitByID indicates an expected call of GetFruitByID.
func (mr *MockrepositoryMockRecorder) GetFruitByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruitByID", reflect.TypeOf((*Mockrepository)(nil).GetFruitByID), ctx, id)
}

// ListFruits mocks base method.
func (m *Mockrepository) ListFruits(ctx context.Context, limit, offset int) ([]*models.Fruit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFruits", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.Fruit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFruits indicates an expected call of ListFruits.
func (mr *MockrepositoryMockRecorder) ListFruits(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFruits", reflect.TypeOf((*Mockrepository)(nil).ListFruits), ctx, limit, offset)
}

// UpdateFruit mocks base method.
func (m *Mockrepository) UpdateFruit(ctx context.Context, fruit *models.Fruit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFruit", ctx, fruit)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFruit indicates an expected call of UpdateFruit.
func (mr *MockrepositoryMockRecorder) UpdateFruit(ctx, fruit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruit", reflect.TypeOf((*Mockrepository)(nil).UpdateFruit), ctx, fruit)
}

// WithTransaction mocks base method.
func (m *Mockrepository) WithTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockrepositoryMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*Mockrepository)(nil).WithTransaction), ctx, fn)
}

// MockoutboxService is a mock of outboxService interface.
type MockoutboxService struct {
	ctrl     *gomock.Controller
	recorder *MockoutboxServiceMockRecorder
	isgomock struct{}
}

// MockoutboxServiceMockRecorder is the mock recorder for MockoutboxService.
type MockoutboxServiceMockRecorder struct {
	mock *MockoutboxService
}

// NewMockoutboxService creates a new mock instance.
func NewMockoutboxService(ctrl *gomock.Controller) *MockoutboxService {
	mock := &MockoutboxService{ctrl: ctrl}
	mock.recorder = &MockoutboxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoutboxService) EXPECT() *MockoutboxServiceMockRecorder {
	return m.recorder
}

// NewOutboxMessage mocks base method.
func (m *MockoutboxService) NewOutboxMessage(ctx context.Context, topic string, msg *domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOutboxMessage", ctx, topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewOutboxMessage indicates an expected call of NewOutboxMessage.
func (mr *MockoutboxServiceMockRecorder) NewOutboxMessage(ctx, topic, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOutboxMessage", reflect.TypeOf((*MockoutboxService)(nil).NewOutboxMessage), ctx, topic, msg)
}
