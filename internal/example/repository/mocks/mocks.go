// Code generated by MockGen. DO NOT EDIT.
// Source: example.go
//
// Generated by this command:
//
//	mockgen -source example.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MocksqlAccessor is a mock of sqlAccessor interface.
type MocksqlAccessor struct {
	ctrl     *gomock.Controller
	recorder *MocksqlAccessorMockRecorder
	isgomock struct{}
}

// MocksqlAccessorMockRecorder is the mock recorder for MocksqlAccessor.
type MocksqlAccessorMockRecorder struct {
	mock *MocksqlAccessor
}

// NewMocksqlAccessor creates a new mock instance.
func NewMocksqlAccessor(ctrl *gomock.Controller) *MocksqlAccessor {
	mock := &MocksqlAccessor{ctrl: ctrl}
	mock.recorder = &MocksqlAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksqlAccessor) EXPECT() *MocksqlAccessorMockRecorder {
	return m.recorder
}

// IsDuplicateKeyError mocks base method.
func (m *MocksqlAccessor) IsDuplicateKeyError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDuplicateKeyError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDuplicateKeyError indicates an expected call of IsDuplicateKeyError.
func (mr *MocksqlAccessorMockRecorder) IsDuplicateKeyError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDuplicateKeyError", reflect.TypeOf((*MocksqlAccessor)(nil).IsDuplicateKeyError), err)
}

// IsNotFoundError mocks base method.
func (m *MocksqlAccessor) IsNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundError indicates an expected call of IsNotFoundError.
func (mr *MocksqlAccessorMockRecorder) IsNotFoundError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundError", reflect.TypeOf((*MocksqlAccessor)(nil).IsNotFoundError), err)
}

// Master mocks base method.
func (m *MocksqlAccessor) Master() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Master")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Master indicates an expected call of Master.
func (mr *MocksqlAccessorMockRecorder) Master() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Master", reflect.TypeOf((*MocksqlAccessor)(nil).Master))
}

// Slave mocks base method.
func (m *MocksqlAccessor) Slave() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slave")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Slave indicates an expected call of Slave.
func (mr *MocksqlAccessorMockRecorder) Slave() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slave", reflect.TypeOf((*MocksqlAccessor)(nil).Slave))
}
