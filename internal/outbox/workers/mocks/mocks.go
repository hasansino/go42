// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go
//
// Generated by this command:
//
//	mockgen -source publisher.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/hasansino/go42/internal/outbox/models"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
	isgomock struct{}
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// GetUnprocessedMessages mocks base method.
func (m *Mockrepository) GetUnprocessedMessages(ctx context.Context, limit int) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedMessages", ctx, limit)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedMessages indicates an expected call of GetUnprocessedMessages.
func (mr *MockrepositoryMockRecorder) GetUnprocessedMessages(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedMessages", reflect.TypeOf((*Mockrepository)(nil).GetUnprocessedMessages), ctx, limit)
}

// SaveFailedMessages mocks base method.
func (m *Mockrepository) SaveFailedMessages(ctx context.Context, messages []models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFailedMessages", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFailedMessages indicates an expected call of SaveFailedMessages.
func (mr *MockrepositoryMockRecorder) SaveFailedMessages(ctx, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFailedMessages", reflect.TypeOf((*Mockrepository)(nil).SaveFailedMessages), ctx, messages)
}

// SaveProcessedMessages mocks base method.
func (m *Mockrepository) SaveProcessedMessages(ctx context.Context, messages []models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProcessedMessages", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProcessedMessages indicates an expected call of SaveProcessedMessages.
func (mr *MockrepositoryMockRecorder) SaveProcessedMessages(ctx, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProcessedMessages", reflect.TypeOf((*Mockrepository)(nil).SaveProcessedMessages), ctx, messages)
}

// WithTransaction mocks base method.
func (m *Mockrepository) WithTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockrepositoryMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*Mockrepository)(nil).WithTransaction), ctx, fn)
}

// Mockpublisher is a mock of publisher interface.
type Mockpublisher struct {
	ctrl     *gomock.Controller
	recorder *MockpublisherMockRecorder
	isgomock struct{}
}

// MockpublisherMockRecorder is the mock recorder for Mockpublisher.
type MockpublisherMockRecorder struct {
	mock *Mockpublisher
}

// NewMockpublisher creates a new mock instance.
func NewMockpublisher(ctrl *gomock.Controller) *Mockpublisher {
	mock := &Mockpublisher{ctrl: ctrl}
	mock.recorder = &MockpublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpublisher) EXPECT() *MockpublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *Mockpublisher) Publish(topic string, event []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockpublisherMockRecorder) Publish(topic, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*Mockpublisher)(nil).Publish), topic, event)
}
