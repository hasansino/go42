// Code generated by MockGen. DO NOT EDIT.
// Source: outbox.go
//
// Generated by this command:
//
//	mockgen -source outbox.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/hasansino/go42/internal/outbox/models"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
	isgomock struct{}
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// NewOutboxMessage mocks base method.
func (m *Mockrepository) NewOutboxMessage(ctx context.Context, msg *models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOutboxMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewOutboxMessage indicates an expected call of NewOutboxMessage.
func (mr *MockrepositoryMockRecorder) NewOutboxMessage(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOutboxMessage", reflect.TypeOf((*Mockrepository)(nil).NewOutboxMessage), ctx, msg)
}
