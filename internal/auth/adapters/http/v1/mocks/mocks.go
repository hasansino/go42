// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go
//
// Generated by this command:
//
//	mockgen -source adapter.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	jwt "github.com/golang-jwt/jwt/v5"
	domain "github.com/hasansino/go42/internal/auth/domain"
	models "github.com/hasansino/go42/internal/auth/models"
	gomock "go.uber.org/mock/gomock"
)

// MockserviceAccessor is a mock of serviceAccessor interface.
type MockserviceAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockserviceAccessorMockRecorder
	isgomock struct{}
}

// MockserviceAccessorMockRecorder is the mock recorder for MockserviceAccessor.
type MockserviceAccessorMockRecorder struct {
	mock *MockserviceAccessor
}

// NewMockserviceAccessor creates a new mock instance.
func NewMockserviceAccessor(ctrl *gomock.Controller) *MockserviceAccessor {
	mock := &MockserviceAccessor{ctrl: ctrl}
	mock.recorder = &MockserviceAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceAccessor) EXPECT() *MockserviceAccessorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockserviceAccessor) CreateUser(ctx context.Context, data *domain.CreateUserData) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockserviceAccessorMockRecorder) CreateUser(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockserviceAccessor)(nil).CreateUser), ctx, data)
}

// DeleteUser mocks base method.
func (m *MockserviceAccessor) DeleteUser(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockserviceAccessorMockRecorder) DeleteUser(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockserviceAccessor)(nil).DeleteUser), ctx, uuid)
}

// GetUserByID mocks base method.
func (m *MockserviceAccessor) GetUserByID(ctx context.Context, id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockserviceAccessorMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockserviceAccessor)(nil).GetUserByID), ctx, id)
}

// GetUserByUUID mocks base method.
func (m *MockserviceAccessor) GetUserByUUID(ctx context.Context, uuid string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, uuid)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockserviceAccessorMockRecorder) GetUserByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockserviceAccessor)(nil).GetUserByUUID), ctx, uuid)
}

// InvalidateJWTToken mocks base method.
func (m *MockserviceAccessor) InvalidateJWTToken(ctx context.Context, token string, until time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateJWTToken", ctx, token, until)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateJWTToken indicates an expected call of InvalidateJWTToken.
func (mr *MockserviceAccessorMockRecorder) InvalidateJWTToken(ctx, token, until any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateJWTToken", reflect.TypeOf((*MockserviceAccessor)(nil).InvalidateJWTToken), ctx, token, until)
}

// ListUsers mocks base method.
func (m *MockserviceAccessor) ListUsers(ctx context.Context, limit, offset int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockserviceAccessorMockRecorder) ListUsers(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockserviceAccessor)(nil).ListUsers), ctx, limit, offset)
}

// Login mocks base method.
func (m *MockserviceAccessor) Login(ctx context.Context, email, password string) (*domain.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(*domain.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockserviceAccessorMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockserviceAccessor)(nil).Login), ctx, email, password)
}

// Logout mocks base method.
func (m *MockserviceAccessor) Logout(ctx context.Context, accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockserviceAccessorMockRecorder) Logout(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockserviceAccessor)(nil).Logout), ctx, accessToken, refreshToken)
}

// Refresh mocks base method.
func (m *MockserviceAccessor) Refresh(ctx context.Context, token string) (*domain.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, token)
	ret0, _ := ret[0].(*domain.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockserviceAccessorMockRecorder) Refresh(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockserviceAccessor)(nil).Refresh), ctx, token)
}

// SignUp mocks base method.
func (m *MockserviceAccessor) SignUp(ctx context.Context, email, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, email, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockserviceAccessorMockRecorder) SignUp(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockserviceAccessor)(nil).SignUp), ctx, email, password)
}

// UpdateUser mocks base method.
func (m *MockserviceAccessor) UpdateUser(ctx context.Context, uuid string, data *domain.UpdateUserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, uuid, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockserviceAccessorMockRecorder) UpdateUser(ctx, uuid, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockserviceAccessor)(nil).UpdateUser), ctx, uuid, data)
}

// ValidateAPIToken mocks base method.
func (m *MockserviceAccessor) ValidateAPIToken(ctx context.Context, token string) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAPIToken", ctx, token)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAPIToken indicates an expected call of ValidateAPIToken.
func (mr *MockserviceAccessorMockRecorder) ValidateAPIToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAPIToken", reflect.TypeOf((*MockserviceAccessor)(nil).ValidateAPIToken), ctx, token)
}

// ValidateJWTTokenInternal mocks base method.
func (m *MockserviceAccessor) ValidateJWTTokenInternal(ctx context.Context, token string) (*jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWTTokenInternal", ctx, token)
	ret0, _ := ret[0].(*jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateJWTTokenInternal indicates an expected call of ValidateJWTTokenInternal.
func (mr *MockserviceAccessorMockRecorder) ValidateJWTTokenInternal(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWTTokenInternal", reflect.TypeOf((*MockserviceAccessor)(nil).ValidateJWTTokenInternal), ctx, token)
}

// MockcacheAccessor is a mock of cacheAccessor interface.
type MockcacheAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockcacheAccessorMockRecorder
	isgomock struct{}
}

// MockcacheAccessorMockRecorder is the mock recorder for MockcacheAccessor.
type MockcacheAccessorMockRecorder struct {
	mock *MockcacheAccessor
}

// NewMockcacheAccessor creates a new mock instance.
func NewMockcacheAccessor(ctrl *gomock.Controller) *MockcacheAccessor {
	mock := &MockcacheAccessor{ctrl: ctrl}
	mock.recorder = &MockcacheAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcacheAccessor) EXPECT() *MockcacheAccessorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockcacheAccessor) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcacheAccessorMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcacheAccessor)(nil).Get), ctx, key)
}

// Invalidate mocks base method.
func (m *MockcacheAccessor) Invalidate(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockcacheAccessorMockRecorder) Invalidate(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockcacheAccessor)(nil).Invalidate), ctx, key)
}

// Set mocks base method.
func (m *MockcacheAccessor) Set(ctx context.Context, key, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockcacheAccessorMockRecorder) Set(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockcacheAccessor)(nil).Set), ctx, key, value, ttl)
}
