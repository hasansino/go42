openapi: 3.1.0
info:
  title: 'auth'
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api/v1'
    description: local
security: []
paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: Create a new user
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '409':
          description: User already exists
        default:
          $ref: '#/components/responses/UnexpectedResponse'
  /auth/login:
    post:
      tags:
        - auth
      summary: Login an existing user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid request
        '403':
          description: User inactive
        default:
          $ref: '#/components/responses/UnexpectedResponse'
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh user token
      operationId: refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid request
        '403':
          description: User inactive
        default:
          $ref: '#/components/responses/UnexpectedResponse'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Invalidate user tokens
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Tokens invalidated successfully
        '400':
          description: Invalid request
        default:
          $ref: '#/components/responses/UnexpectedResponse'
  /users/me:
    get:
      tags:
        - users
      summary: Retrieve current user information
      operationId: users.me.read
      security:
        - jwt: [users:read_self]
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        default:
          $ref: '#/components/responses/UnexpectedResponse'
    put:
      tags:
        - users
      summary: Update current user
      operationId: users.me.update
      security:
        - jwt: [users:update_self]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSelfRequest'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        default:
          $ref: '#/components/responses/UnexpectedResponse'
  /users:
    get:
      tags:
        - users
      summary: List users
      operationId: users.list
      security:
        - jwt: [users:list]
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        default:
          $ref: '#/components/responses/UnexpectedResponse'
    post:
      tags:
        - users
      summary: Create a new user
      operationId: users.create
      security:
        - jwt: [users:create]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        default:
          $ref: '#/components/responses/UnexpectedResponse'
  /users/{uuid}:
    get:
      tags:
        - users
      summary: Get user by UUID
      operationId: users.get
      security:
        - jwt: [users:read_others]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid UUID
        '401':
          description: Unauthorized
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/UnexpectedResponse'
    put:
      tags:
        - users
      summary: Update user
      operationId: users.update
      security:
        - jwt: [users:update]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/UnexpectedResponse'
    delete:
      tags:
        - users
      summary: Delete user
      operationId: users.delete
      security:
        - jwt: [users:delete]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid UUID
        '401':
          description: Unauthorized
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/UnexpectedResponse'
# ---
components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: "JWT token in Authorization header (format: Bearer <token>)"
  responses:
    UnexpectedResponse:
      description: Unexpected response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.
        errors:
          type: array
          items:
            type: object
          description: Optional list of additional error details.
    User:
      type: object
      properties:
        uuid:
          type: string
          default: ""
        email:
          type: string
          default: ""
        created_at:
          type: string
          default: ""
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
    Tokens:
      type: object
      properties:
        access_token:
          type: string
          default: ""
        refresh_token:
          type: string
          default: ""
        expires_in:
          type: integer
          default: 0
    SignUpRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: "user@example.com"
        password:
          type: string
          default: "12#$abCD%$"
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: "user@example.com"
        password:
          type: string
          default: "12#$abCD%$"
    RefreshRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          default: ""
    LogoutRequest:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          default: ""
        refresh_token:
          type: string
          default: ""
    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: "user@example.com"
        password:
          type: string
          default: "12#$abCD%$"
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          default: "user@example.com"
        password:
          type: string
          default: "12#$abCD%$"
    UpdateSelfRequest:
      type: object
      properties:
        email:
          type: string
          default: "user@example.com"
        password:
          type: string
          default: "12#$abCD%$"
