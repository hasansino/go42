openapi: 3.1.0
info:
  title: v1 combined specification
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: local
tags:
  - name: auth
    x-displayName: auth
  - name: users
    x-displayName: users
  - name: fruits
    x-displayName: fruits
paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: Create a new user
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '409':
          description: User already exists
      security: []
  /auth/login:
    post:
      tags:
        - auth
      summary: Login an existing user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid request
        '403':
          description: User inactive
      security: []
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh user token
      operationId: refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid request
        '403':
          description: User inactive
      security: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: Invalidate user tokens
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Tokens invalidated successfully
        '400':
          description: Invalid request
      security: []
  /users/me:
    get:
      tags:
        - users
      summary: Retrieve current user information
      operationId: users.me.read
      security:
        - jwt:
            - user:read_self
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      tags:
        - users
      summary: Update current user
      operationId: users.me.update
      security:
        - jwt:
            - user:update_self
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSelfRequest'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /fruits:
    get:
      tags:
        - fruits
      summary: Get all fruits
      operationId: getFruits
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of fruits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fruit'
      security: []
    post:
      tags:
        - fruits
      summary: Create a new fruit
      operationId: createFruit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFruitRequest'
      responses:
        '201':
          description: Fruit created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '400':
          description: Invalid input
      security: []
  /fruits/{id}:
    get:
      tags:
        - fruits
      summary: Get a fruit by ID
      operationId: getFruitById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The requested fruit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: Fruit not found
      security: []
    put:
      tags:
        - fruits
      summary: Update a fruit by ID
      operationId: updateFruitById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFruitRequest'
      responses:
        '200':
          description: Fruit updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '400':
          description: Invalid input
        '404':
          description: Fruit not found
      security: []
    delete:
      tags:
        - fruits
      summary: Delete a fruit by ID
      operationId: deleteFruitById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fruit deleted
        '404':
          description: Fruit not found
      security: []
components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: 'JWT token in Authorization header (format: Bearer <token>)'
  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
          default: ''
        email:
          type: string
          default: ''
        created_at:
          type: string
          default: ''
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
    Tokens:
      type: object
      properties:
        access_token:
          type: string
          default: ''
        refresh_token:
          type: string
          default: ''
        expires_in:
          type: integer
          default: 0
    SignUpRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: user@example.com
        password:
          type: string
          default: '1234567890'
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: user@example.com
        password:
          type: string
          default: '1234567890'
    RefreshRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          default: ''
    LogoutRequest:
      type: object
      required:
        - token
      properties:
        access_token:
          type: string
          default: ''
        refresh_token:
          type: string
          default: ''
    UpdateSelfRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: user@example.com
        password:
          type: string
          default: '1234567890'
    Fruit:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    CreateFruitRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 20
    UpdateFruitRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 20
x-tagGroups:
  - name: auth
    tags:
      - auth
      - users
  - name: example
    tags:
      - fruits
