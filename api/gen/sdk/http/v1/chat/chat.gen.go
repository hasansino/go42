// Package chat provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package chat

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// ChatWebsocketConnectParams defines parameters for ChatWebsocketConnect.
type ChatWebsocketConnectParams struct {
	// Authorization JWT authentication token
	Authorization string `json:"Authorization"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ChatWebsocketConnect request
	ChatWebsocketConnect(ctx context.Context, params *ChatWebsocketConnectParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ChatWebsocketConnect(ctx context.Context, params *ChatWebsocketConnectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatWebsocketConnectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewChatWebsocketConnectRequest generates requests for ChatWebsocketConnect
func NewChatWebsocketConnectRequest(server string, params *ChatWebsocketConnectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws/chat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ChatWebsocketConnectWithResponse request
	ChatWebsocketConnectWithResponse(ctx context.Context, params *ChatWebsocketConnectParams, reqEditors ...RequestEditorFn) (*ChatWebsocketConnectResponse, error)
}

type ChatWebsocketConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChatWebsocketConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatWebsocketConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ChatWebsocketConnectWithResponse request returning *ChatWebsocketConnectResponse
func (c *ClientWithResponses) ChatWebsocketConnectWithResponse(ctx context.Context, params *ChatWebsocketConnectParams, reqEditors ...RequestEditorFn) (*ChatWebsocketConnectResponse, error) {
	rsp, err := c.ChatWebsocketConnect(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatWebsocketConnectResponse(rsp)
}

// ParseChatWebsocketConnectResponse parses an HTTP response from a ChatWebsocketConnectWithResponse call
func ParseChatWebsocketConnectResponse(rsp *http.Response) (*ChatWebsocketConnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatWebsocketConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xWbXPbNgz+Kzh+ajy/Lluv07cs1/bspS8XN8vuqsyGKdhiIpEcSdl1c/rvO1DySxrn",
	"rp9sCg8BPMAjQI9CmtIaTTp4kTwKT7JyKmynMqeS4qP7TeCfjLx0ygZltEjE5PYLBPNAGpSGiyrkxqnv",
	"yEbICTNy8GppXIkhgT8JHTlIq+HwXMY78S+dia5Q7Ku5ILpCY0kiEU/cia4IW8uP0aq/aCvquuZ7S/M8",
	"qVtaTI18oNBboKcMHGHRC6okkDkG8FsfqISNCjk4Y0ooUeOKStKBo6hQcBiGiq5Yk/ON11F/2B+KuiuM",
	"JY1WiUSc90f9oegKiyGPNRps/CBeTB7Fik7U660PuCiUz8kDwj5RkEZrkrFuS+N+zFiasqy0krES/VSn",
	"utM53L25voLPGAI5nXQ6qe7BfOOTwaAwEovc+JC8Gb4Z7lKbw6uM1lQYy4TPWjjjt6ZymSlR6b405RHe",
	"OpNVMbmzJjZ3hnRoE2qDHqTg6L9KOcpe1ERWOaVXkKPOfI4PxNfftTKZP7nxsmzmTSofyHtc0e46p3JR",
	"FEeVLRuAh8oTTKafPkIjyKb/ISfwwVUyVI6SVM/n83tvdKofUw2QRs2lIoFUtH5mzZNuY84wIJsfYdAB",
	"tvS8JamWSgKboDOAOtV19NuWbo2qwEVBsMv8y9aSj4mz/bJQpAMEA1Nya3K7jkpHGGjGep1DDy7jERA0",
	"bRqNsCUiC+VDxHkGXikfAPdB91AfsfdG6b3PiVEaUAN9Uz5wfw4uCdeH2Fd8AjyYPels1taHAVPSGeCu",
	"8sxlB2aGDS9+2nDdMWTErKGZsZdrfjXjmZUjjV4q7pvi7rRwP2Oye5pmecT0QDI6ZqZHfvl42uesoGXY",
	"4yLz58AjsmMtTcnViqVtDRFUeXJHcW88OWiOzdjRJrBSDl7jhV34COfDC2ByzjgGvuU/P9ijkg4j5cN+",
	"wLXFvqiCYToSrNKrgTV6BQ9EFgu1jsm/dyhpWRWQKX80m/iNLZReMeSaBVioUrFWEjgfHl41Sw5KpatA",
	"8CrWblU5bspZynPcWHIxz3EmEnGZY7ilhY9va5tzHKkOSwrkvEi+nto6+GQGNZNHdAV9w9LGAd4ODtpO",
	"8sV7qT6pyfjm+3j0UY39WF//Li/Hr8cP9p+/Lyd/9Pv9n11Cu9kmkuAq6grPCxJ50NtmBItE/NuG7v9y",
	"2Fo+8MgTdX3HPrw12jdrdTQcPV8T040KMmdVfXYmGGkKD73T64L2GyXj5fTbKXc3GlsalEXJrrFQGRju",
	"kvccZj+8Gx/nz328M26hsox0dOCr5VLJOKosuejFaB8v//r6RAJ25TAjuN5thmMyVWtcoiqYRN3df37E",
	"3scPj693XDlflSW67fEi/dklyq3AFaupWe13dROIh9EpjcXtKbqicgXLIgT7fKWiVYP1SNR39f8BAAD/",
	"/1CxeCxACQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
