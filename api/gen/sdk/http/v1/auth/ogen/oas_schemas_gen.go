// Code generated by ogen, DO NOT EDIT.

package auth

import (
	"fmt"
)

func (s *UnexpectedResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/CreateUserRequest
type CreateUserRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *CreateUserRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *CreateUserRequest) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *CreateUserRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *CreateUserRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// A URI reference that identifies the problem type.
	Type string `json:"type"`
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// The HTTP status code generated by the origin server.
	Status int32 `json:"status"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail OptString `json:"detail"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance OptString `json:"instance"`
	// Optional list of additional error details.
	Errors []ErrorErrorsItem `json:"errors"`
}

// GetType returns the value of Type.
func (s *Error) GetType() string {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Error) GetTitle() string {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() int32 {
	return s.Status
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *Error) GetInstance() OptString {
	return s.Instance
}

// GetErrors returns the value of Errors.
func (s *Error) GetErrors() []ErrorErrorsItem {
	return s.Errors
}

// SetType sets the value of Type.
func (s *Error) SetType(val string) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Error) SetTitle(val string) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val int32) {
	s.Status = val
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *Error) SetInstance(val OptString) {
	s.Instance = val
}

// SetErrors sets the value of Errors.
func (s *Error) SetErrors(val []ErrorErrorsItem) {
	s.Errors = val
}

type ErrorErrorsItem struct{}

type Jwt struct {
	APIKey string
	Roles  []string
}

// GetAPIKey returns the value of APIKey.
func (s *Jwt) GetAPIKey() string {
	return s.APIKey
}

// GetRoles returns the value of Roles.
func (s *Jwt) GetRoles() []string {
	return s.Roles
}

// SetAPIKey sets the value of APIKey.
func (s *Jwt) SetAPIKey(val string) {
	s.APIKey = val
}

// SetRoles sets the value of Roles.
func (s *Jwt) SetRoles(val []string) {
	s.Roles = val
}

// LoginBadRequest is response for Login operation.
type LoginBadRequest struct{}

func (*LoginBadRequest) loginRes() {}

// LoginForbidden is response for Login operation.
type LoginForbidden struct{}

func (*LoginForbidden) loginRes() {}

// Ref: #/components/schemas/LoginRequest
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginRequest) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginRequest) SetPassword(val string) {
	s.Password = val
}

// LogoutBadRequest is response for Logout operation.
type LogoutBadRequest struct{}

func (*LogoutBadRequest) logoutRes() {}

// LogoutOK is response for Logout operation.
type LogoutOK struct{}

func (*LogoutOK) logoutRes() {}

// Ref: #/components/schemas/LogoutRequest
type LogoutRequest struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *LogoutRequest) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *LogoutRequest) GetRefreshToken() string {
	return s.RefreshToken
}

// SetAccessToken sets the value of AccessToken.
func (s *LogoutRequest) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *LogoutRequest) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// RefreshBadRequest is response for Refresh operation.
type RefreshBadRequest struct{}

func (*RefreshBadRequest) refreshRes() {}

// RefreshForbidden is response for Refresh operation.
type RefreshForbidden struct{}

func (*RefreshForbidden) refreshRes() {}

// Ref: #/components/schemas/RefreshRequest
type RefreshRequest struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *RefreshRequest) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *RefreshRequest) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/SignUpRequest
type SignUpRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *SignUpRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignUpRequest) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *SignUpRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignUpRequest) SetPassword(val string) {
	s.Password = val
}

// SignupBadRequest is response for Signup operation.
type SignupBadRequest struct{}

func (*SignupBadRequest) signupRes() {}

// SignupConflict is response for Signup operation.
type SignupConflict struct{}

func (*SignupConflict) signupRes() {}

// Ref: #/components/schemas/Tokens
type Tokens struct {
	AccessToken  OptString `json:"access_token"`
	RefreshToken OptString `json:"refresh_token"`
	ExpiresIn    OptInt    `json:"expires_in"`
}

// GetAccessToken returns the value of AccessToken.
func (s *Tokens) GetAccessToken() OptString {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *Tokens) GetRefreshToken() OptString {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *Tokens) GetExpiresIn() OptInt {
	return s.ExpiresIn
}

// SetAccessToken sets the value of AccessToken.
func (s *Tokens) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *Tokens) SetRefreshToken(val OptString) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *Tokens) SetExpiresIn(val OptInt) {
	s.ExpiresIn = val
}

func (*Tokens) loginRes()   {}
func (*Tokens) refreshRes() {}

// UnexpectedResponseStatusCode wraps Error with StatusCode.
type UnexpectedResponseStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedResponseStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedResponseStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/UpdateSelfRequest
type UpdateSelfRequest struct {
	Email    OptString `json:"email"`
	Password OptString `json:"password"`
}

// GetEmail returns the value of Email.
func (s *UpdateSelfRequest) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *UpdateSelfRequest) GetPassword() OptString {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *UpdateSelfRequest) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *UpdateSelfRequest) SetPassword(val OptString) {
	s.Password = val
}

// Ref: #/components/schemas/UpdateUserRequest
type UpdateUserRequest struct {
	Email    OptString `json:"email"`
	Password OptString `json:"password"`
}

// GetEmail returns the value of Email.
func (s *UpdateUserRequest) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *UpdateUserRequest) GetPassword() OptString {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *UpdateUserRequest) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *UpdateUserRequest) SetPassword(val OptString) {
	s.Password = val
}

// Ref: #/components/schemas/User
type User struct {
	UUID        OptString `json:"uuid"`
	Email       OptString `json:"email"`
	CreatedAt   OptString `json:"created_at"`
	Roles       []string  `json:"roles"`
	Permissions []string  `json:"permissions"`
}

// GetUUID returns the value of UUID.
func (s *User) GetUUID() OptString {
	return s.UUID
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetRoles returns the value of Roles.
func (s *User) GetRoles() []string {
	return s.Roles
}

// GetPermissions returns the value of Permissions.
func (s *User) GetPermissions() []string {
	return s.Permissions
}

// SetUUID sets the value of UUID.
func (s *User) SetUUID(val OptString) {
	s.UUID = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetRoles sets the value of Roles.
func (s *User) SetRoles(val []string) {
	s.Roles = val
}

// SetPermissions sets the value of Permissions.
func (s *User) SetPermissions(val []string) {
	s.Permissions = val
}

func (*User) signupRes()      {}
func (*User) usersCreateRes() {}
func (*User) usersGetRes()    {}
func (*User) usersMeReadRes() {}

// UsersCreateBadRequest is response for UsersCreate operation.
type UsersCreateBadRequest struct{}

func (*UsersCreateBadRequest) usersCreateRes() {}

// UsersCreateUnauthorized is response for UsersCreate operation.
type UsersCreateUnauthorized struct{}

func (*UsersCreateUnauthorized) usersCreateRes() {}

// UsersDeleteBadRequest is response for UsersDelete operation.
type UsersDeleteBadRequest struct{}

func (*UsersDeleteBadRequest) usersDeleteRes() {}

// UsersDeleteNotFound is response for UsersDelete operation.
type UsersDeleteNotFound struct{}

func (*UsersDeleteNotFound) usersDeleteRes() {}

// UsersDeleteOK is response for UsersDelete operation.
type UsersDeleteOK struct{}

func (*UsersDeleteOK) usersDeleteRes() {}

// UsersDeleteUnauthorized is response for UsersDelete operation.
type UsersDeleteUnauthorized struct{}

func (*UsersDeleteUnauthorized) usersDeleteRes() {}

// UsersGetBadRequest is response for UsersGet operation.
type UsersGetBadRequest struct{}

func (*UsersGetBadRequest) usersGetRes() {}

// UsersGetNotFound is response for UsersGet operation.
type UsersGetNotFound struct{}

func (*UsersGetNotFound) usersGetRes() {}

// UsersGetUnauthorized is response for UsersGet operation.
type UsersGetUnauthorized struct{}

func (*UsersGetUnauthorized) usersGetRes() {}

type UsersListOKApplicationJSON []User

func (*UsersListOKApplicationJSON) usersListRes() {}

// UsersListUnauthorized is response for UsersList operation.
type UsersListUnauthorized struct{}

func (*UsersListUnauthorized) usersListRes() {}

// UsersMeReadUnauthorized is response for UsersMeRead operation.
type UsersMeReadUnauthorized struct{}

func (*UsersMeReadUnauthorized) usersMeReadRes() {}

// UsersMeUpdateBadRequest is response for UsersMeUpdate operation.
type UsersMeUpdateBadRequest struct{}

func (*UsersMeUpdateBadRequest) usersMeUpdateRes() {}

// UsersMeUpdateOK is response for UsersMeUpdate operation.
type UsersMeUpdateOK struct{}

func (*UsersMeUpdateOK) usersMeUpdateRes() {}

// UsersMeUpdateUnauthorized is response for UsersMeUpdate operation.
type UsersMeUpdateUnauthorized struct{}

func (*UsersMeUpdateUnauthorized) usersMeUpdateRes() {}

// UsersUpdateBadRequest is response for UsersUpdate operation.
type UsersUpdateBadRequest struct{}

func (*UsersUpdateBadRequest) usersUpdateRes() {}

// UsersUpdateNotFound is response for UsersUpdate operation.
type UsersUpdateNotFound struct{}

func (*UsersUpdateNotFound) usersUpdateRes() {}

// UsersUpdateOK is response for UsersUpdate operation.
type UsersUpdateOK struct{}

func (*UsersUpdateOK) usersUpdateRes() {}

// UsersUpdateUnauthorized is response for UsersUpdate operation.
type UsersUpdateUnauthorized struct{}

func (*UsersUpdateUnauthorized) usersUpdateRes() {}
