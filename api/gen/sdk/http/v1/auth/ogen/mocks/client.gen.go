// Code generated by MockGen. DO NOT EDIT.
// Source: ./gen/sdk/http/v1/auth/ogen/oas_client_gen.go
//
// Generated by this command:
//
//	mockgen -source=./gen/sdk/http/v1/auth/ogen/oas_client_gen.go -destination=./gen/sdk/http/v1/auth/ogen/mocks/client.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/hasansino/go42/api/gen/sdk/http/v1/auth/ogen"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoker is a mock of Invoker interface.
type MockInvoker struct {
	ctrl     *gomock.Controller
	recorder *MockInvokerMockRecorder
	isgomock struct{}
}

// MockInvokerMockRecorder is the mock recorder for MockInvoker.
type MockInvokerMockRecorder struct {
	mock *MockInvoker
}

// NewMockInvoker creates a new mock instance.
func NewMockInvoker(ctrl *gomock.Controller) *MockInvoker {
	mock := &MockInvoker{ctrl: ctrl}
	mock.recorder = &MockInvokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoker) EXPECT() *MockInvokerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockInvoker) Login(ctx context.Context, request *auth.LoginRequest) (auth.LoginRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(auth.LoginRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockInvokerMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockInvoker)(nil).Login), ctx, request)
}

// Logout mocks base method.
func (m *MockInvoker) Logout(ctx context.Context, request *auth.LogoutRequest) (auth.LogoutRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, request)
	ret0, _ := ret[0].(auth.LogoutRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockInvokerMockRecorder) Logout(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockInvoker)(nil).Logout), ctx, request)
}

// Refresh mocks base method.
func (m *MockInvoker) Refresh(ctx context.Context, request *auth.RefreshRequest) (auth.RefreshRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, request)
	ret0, _ := ret[0].(auth.RefreshRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockInvokerMockRecorder) Refresh(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockInvoker)(nil).Refresh), ctx, request)
}

// Signup mocks base method.
func (m *MockInvoker) Signup(ctx context.Context, request *auth.SignUpRequest) (auth.SignupRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, request)
	ret0, _ := ret[0].(auth.SignupRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockInvokerMockRecorder) Signup(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockInvoker)(nil).Signup), ctx, request)
}

// UsersCreate mocks base method.
func (m *MockInvoker) UsersCreate(ctx context.Context, request *auth.CreateUserRequest) (auth.UsersCreateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersCreate", ctx, request)
	ret0, _ := ret[0].(auth.UsersCreateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersCreate indicates an expected call of UsersCreate.
func (mr *MockInvokerMockRecorder) UsersCreate(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersCreate", reflect.TypeOf((*MockInvoker)(nil).UsersCreate), ctx, request)
}

// UsersDelete mocks base method.
func (m *MockInvoker) UsersDelete(ctx context.Context, params auth.UsersDeleteParams) (auth.UsersDeleteRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersDelete", ctx, params)
	ret0, _ := ret[0].(auth.UsersDeleteRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersDelete indicates an expected call of UsersDelete.
func (mr *MockInvokerMockRecorder) UsersDelete(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersDelete", reflect.TypeOf((*MockInvoker)(nil).UsersDelete), ctx, params)
}

// UsersGet mocks base method.
func (m *MockInvoker) UsersGet(ctx context.Context, params auth.UsersGetParams) (auth.UsersGetRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersGet", ctx, params)
	ret0, _ := ret[0].(auth.UsersGetRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersGet indicates an expected call of UsersGet.
func (mr *MockInvokerMockRecorder) UsersGet(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersGet", reflect.TypeOf((*MockInvoker)(nil).UsersGet), ctx, params)
}

// UsersList mocks base method.
func (m *MockInvoker) UsersList(ctx context.Context, params auth.UsersListParams) (auth.UsersListRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersList", ctx, params)
	ret0, _ := ret[0].(auth.UsersListRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersList indicates an expected call of UsersList.
func (mr *MockInvokerMockRecorder) UsersList(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersList", reflect.TypeOf((*MockInvoker)(nil).UsersList), ctx, params)
}

// UsersMeRead mocks base method.
func (m *MockInvoker) UsersMeRead(ctx context.Context) (auth.UsersMeReadRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersMeRead", ctx)
	ret0, _ := ret[0].(auth.UsersMeReadRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersMeRead indicates an expected call of UsersMeRead.
func (mr *MockInvokerMockRecorder) UsersMeRead(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersMeRead", reflect.TypeOf((*MockInvoker)(nil).UsersMeRead), ctx)
}

// UsersMeUpdate mocks base method.
func (m *MockInvoker) UsersMeUpdate(ctx context.Context, request *auth.UpdateSelfRequest) (auth.UsersMeUpdateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersMeUpdate", ctx, request)
	ret0, _ := ret[0].(auth.UsersMeUpdateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersMeUpdate indicates an expected call of UsersMeUpdate.
func (mr *MockInvokerMockRecorder) UsersMeUpdate(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersMeUpdate", reflect.TypeOf((*MockInvoker)(nil).UsersMeUpdate), ctx, request)
}

// UsersUpdate mocks base method.
func (m *MockInvoker) UsersUpdate(ctx context.Context, request *auth.UpdateUserRequest, params auth.UsersUpdateParams) (auth.UsersUpdateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersUpdate", ctx, request, params)
	ret0, _ := ret[0].(auth.UsersUpdateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersUpdate indicates an expected call of UsersUpdate.
func (mr *MockInvokerMockRecorder) UsersUpdate(ctx, request, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersUpdate", reflect.TypeOf((*MockInvoker)(nil).UsersUpdate), ctx, request, params)
}

// MockerrorHandler is a mock of errorHandler interface.
type MockerrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockerrorHandlerMockRecorder
	isgomock struct{}
}

// MockerrorHandlerMockRecorder is the mock recorder for MockerrorHandler.
type MockerrorHandlerMockRecorder struct {
	mock *MockerrorHandler
}

// NewMockerrorHandler creates a new mock instance.
func NewMockerrorHandler(ctrl *gomock.Controller) *MockerrorHandler {
	mock := &MockerrorHandler{ctrl: ctrl}
	mock.recorder = &MockerrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrorHandler) EXPECT() *MockerrorHandlerMockRecorder {
	return m.recorder
}

// NewError mocks base method.
func (m *MockerrorHandler) NewError(ctx context.Context, err error) *auth.UnexpectedResponseStatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewError", ctx, err)
	ret0, _ := ret[0].(*auth.UnexpectedResponseStatusCode)
	return ret0
}

// NewError indicates an expected call of NewError.
func (mr *MockerrorHandlerMockRecorder) NewError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewError", reflect.TypeOf((*MockerrorHandler)(nil).NewError), ctx, err)
}
