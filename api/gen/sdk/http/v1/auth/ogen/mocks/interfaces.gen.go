// Code generated by MockGen. DO NOT EDIT.
// Source: ./gen/sdk/http/v1/auth/ogen/oas_interfaces_gen.go
//
// Generated by this command:
//
//	mockgen -source=./gen/sdk/http/v1/auth/ogen/oas_interfaces_gen.go -destination=./gen/sdk/http/v1/auth/ogen/mocks/interfaces.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoginRes is a mock of LoginRes interface.
type MockLoginRes struct {
	ctrl     *gomock.Controller
	recorder *MockLoginResMockRecorder
	isgomock struct{}
}

// MockLoginResMockRecorder is the mock recorder for MockLoginRes.
type MockLoginResMockRecorder struct {
	mock *MockLoginRes
}

// NewMockLoginRes creates a new mock instance.
func NewMockLoginRes(ctrl *gomock.Controller) *MockLoginRes {
	mock := &MockLoginRes{ctrl: ctrl}
	mock.recorder = &MockLoginResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRes) EXPECT() *MockLoginResMockRecorder {
	return m.recorder
}

// loginRes mocks base method.
func (m *MockLoginRes) loginRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "loginRes")
}

// loginRes indicates an expected call of loginRes.
func (mr *MockLoginResMockRecorder) loginRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loginRes", reflect.TypeOf((*MockLoginRes)(nil).loginRes))
}

// MockLogoutRes is a mock of LogoutRes interface.
type MockLogoutRes struct {
	ctrl     *gomock.Controller
	recorder *MockLogoutResMockRecorder
	isgomock struct{}
}

// MockLogoutResMockRecorder is the mock recorder for MockLogoutRes.
type MockLogoutResMockRecorder struct {
	mock *MockLogoutRes
}

// NewMockLogoutRes creates a new mock instance.
func NewMockLogoutRes(ctrl *gomock.Controller) *MockLogoutRes {
	mock := &MockLogoutRes{ctrl: ctrl}
	mock.recorder = &MockLogoutResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogoutRes) EXPECT() *MockLogoutResMockRecorder {
	return m.recorder
}

// logoutRes mocks base method.
func (m *MockLogoutRes) logoutRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "logoutRes")
}

// logoutRes indicates an expected call of logoutRes.
func (mr *MockLogoutResMockRecorder) logoutRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "logoutRes", reflect.TypeOf((*MockLogoutRes)(nil).logoutRes))
}

// MockRefreshRes is a mock of RefreshRes interface.
type MockRefreshRes struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshResMockRecorder
	isgomock struct{}
}

// MockRefreshResMockRecorder is the mock recorder for MockRefreshRes.
type MockRefreshResMockRecorder struct {
	mock *MockRefreshRes
}

// NewMockRefreshRes creates a new mock instance.
func NewMockRefreshRes(ctrl *gomock.Controller) *MockRefreshRes {
	mock := &MockRefreshRes{ctrl: ctrl}
	mock.recorder = &MockRefreshResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshRes) EXPECT() *MockRefreshResMockRecorder {
	return m.recorder
}

// refreshRes mocks base method.
func (m *MockRefreshRes) refreshRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "refreshRes")
}

// refreshRes indicates an expected call of refreshRes.
func (mr *MockRefreshResMockRecorder) refreshRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "refreshRes", reflect.TypeOf((*MockRefreshRes)(nil).refreshRes))
}

// MockSignupRes is a mock of SignupRes interface.
type MockSignupRes struct {
	ctrl     *gomock.Controller
	recorder *MockSignupResMockRecorder
	isgomock struct{}
}

// MockSignupResMockRecorder is the mock recorder for MockSignupRes.
type MockSignupResMockRecorder struct {
	mock *MockSignupRes
}

// NewMockSignupRes creates a new mock instance.
func NewMockSignupRes(ctrl *gomock.Controller) *MockSignupRes {
	mock := &MockSignupRes{ctrl: ctrl}
	mock.recorder = &MockSignupResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignupRes) EXPECT() *MockSignupResMockRecorder {
	return m.recorder
}

// signupRes mocks base method.
func (m *MockSignupRes) signupRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "signupRes")
}

// signupRes indicates an expected call of signupRes.
func (mr *MockSignupResMockRecorder) signupRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "signupRes", reflect.TypeOf((*MockSignupRes)(nil).signupRes))
}

// MockUsersCreateRes is a mock of UsersCreateRes interface.
type MockUsersCreateRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersCreateResMockRecorder
	isgomock struct{}
}

// MockUsersCreateResMockRecorder is the mock recorder for MockUsersCreateRes.
type MockUsersCreateResMockRecorder struct {
	mock *MockUsersCreateRes
}

// NewMockUsersCreateRes creates a new mock instance.
func NewMockUsersCreateRes(ctrl *gomock.Controller) *MockUsersCreateRes {
	mock := &MockUsersCreateRes{ctrl: ctrl}
	mock.recorder = &MockUsersCreateResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersCreateRes) EXPECT() *MockUsersCreateResMockRecorder {
	return m.recorder
}

// usersCreateRes mocks base method.
func (m *MockUsersCreateRes) usersCreateRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersCreateRes")
}

// usersCreateRes indicates an expected call of usersCreateRes.
func (mr *MockUsersCreateResMockRecorder) usersCreateRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersCreateRes", reflect.TypeOf((*MockUsersCreateRes)(nil).usersCreateRes))
}

// MockUsersDeleteRes is a mock of UsersDeleteRes interface.
type MockUsersDeleteRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDeleteResMockRecorder
	isgomock struct{}
}

// MockUsersDeleteResMockRecorder is the mock recorder for MockUsersDeleteRes.
type MockUsersDeleteResMockRecorder struct {
	mock *MockUsersDeleteRes
}

// NewMockUsersDeleteRes creates a new mock instance.
func NewMockUsersDeleteRes(ctrl *gomock.Controller) *MockUsersDeleteRes {
	mock := &MockUsersDeleteRes{ctrl: ctrl}
	mock.recorder = &MockUsersDeleteResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersDeleteRes) EXPECT() *MockUsersDeleteResMockRecorder {
	return m.recorder
}

// usersDeleteRes mocks base method.
func (m *MockUsersDeleteRes) usersDeleteRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersDeleteRes")
}

// usersDeleteRes indicates an expected call of usersDeleteRes.
func (mr *MockUsersDeleteResMockRecorder) usersDeleteRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersDeleteRes", reflect.TypeOf((*MockUsersDeleteRes)(nil).usersDeleteRes))
}

// MockUsersGetRes is a mock of UsersGetRes interface.
type MockUsersGetRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersGetResMockRecorder
	isgomock struct{}
}

// MockUsersGetResMockRecorder is the mock recorder for MockUsersGetRes.
type MockUsersGetResMockRecorder struct {
	mock *MockUsersGetRes
}

// NewMockUsersGetRes creates a new mock instance.
func NewMockUsersGetRes(ctrl *gomock.Controller) *MockUsersGetRes {
	mock := &MockUsersGetRes{ctrl: ctrl}
	mock.recorder = &MockUsersGetResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersGetRes) EXPECT() *MockUsersGetResMockRecorder {
	return m.recorder
}

// usersGetRes mocks base method.
func (m *MockUsersGetRes) usersGetRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersGetRes")
}

// usersGetRes indicates an expected call of usersGetRes.
func (mr *MockUsersGetResMockRecorder) usersGetRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersGetRes", reflect.TypeOf((*MockUsersGetRes)(nil).usersGetRes))
}

// MockUsersListRes is a mock of UsersListRes interface.
type MockUsersListRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersListResMockRecorder
	isgomock struct{}
}

// MockUsersListResMockRecorder is the mock recorder for MockUsersListRes.
type MockUsersListResMockRecorder struct {
	mock *MockUsersListRes
}

// NewMockUsersListRes creates a new mock instance.
func NewMockUsersListRes(ctrl *gomock.Controller) *MockUsersListRes {
	mock := &MockUsersListRes{ctrl: ctrl}
	mock.recorder = &MockUsersListResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersListRes) EXPECT() *MockUsersListResMockRecorder {
	return m.recorder
}

// usersListRes mocks base method.
func (m *MockUsersListRes) usersListRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersListRes")
}

// usersListRes indicates an expected call of usersListRes.
func (mr *MockUsersListResMockRecorder) usersListRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersListRes", reflect.TypeOf((*MockUsersListRes)(nil).usersListRes))
}

// MockUsersMeReadRes is a mock of UsersMeReadRes interface.
type MockUsersMeReadRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMeReadResMockRecorder
	isgomock struct{}
}

// MockUsersMeReadResMockRecorder is the mock recorder for MockUsersMeReadRes.
type MockUsersMeReadResMockRecorder struct {
	mock *MockUsersMeReadRes
}

// NewMockUsersMeReadRes creates a new mock instance.
func NewMockUsersMeReadRes(ctrl *gomock.Controller) *MockUsersMeReadRes {
	mock := &MockUsersMeReadRes{ctrl: ctrl}
	mock.recorder = &MockUsersMeReadResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersMeReadRes) EXPECT() *MockUsersMeReadResMockRecorder {
	return m.recorder
}

// usersMeReadRes mocks base method.
func (m *MockUsersMeReadRes) usersMeReadRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersMeReadRes")
}

// usersMeReadRes indicates an expected call of usersMeReadRes.
func (mr *MockUsersMeReadResMockRecorder) usersMeReadRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersMeReadRes", reflect.TypeOf((*MockUsersMeReadRes)(nil).usersMeReadRes))
}

// MockUsersMeUpdateRes is a mock of UsersMeUpdateRes interface.
type MockUsersMeUpdateRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMeUpdateResMockRecorder
	isgomock struct{}
}

// MockUsersMeUpdateResMockRecorder is the mock recorder for MockUsersMeUpdateRes.
type MockUsersMeUpdateResMockRecorder struct {
	mock *MockUsersMeUpdateRes
}

// NewMockUsersMeUpdateRes creates a new mock instance.
func NewMockUsersMeUpdateRes(ctrl *gomock.Controller) *MockUsersMeUpdateRes {
	mock := &MockUsersMeUpdateRes{ctrl: ctrl}
	mock.recorder = &MockUsersMeUpdateResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersMeUpdateRes) EXPECT() *MockUsersMeUpdateResMockRecorder {
	return m.recorder
}

// usersMeUpdateRes mocks base method.
func (m *MockUsersMeUpdateRes) usersMeUpdateRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersMeUpdateRes")
}

// usersMeUpdateRes indicates an expected call of usersMeUpdateRes.
func (mr *MockUsersMeUpdateResMockRecorder) usersMeUpdateRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersMeUpdateRes", reflect.TypeOf((*MockUsersMeUpdateRes)(nil).usersMeUpdateRes))
}

// MockUsersUpdateRes is a mock of UsersUpdateRes interface.
type MockUsersUpdateRes struct {
	ctrl     *gomock.Controller
	recorder *MockUsersUpdateResMockRecorder
	isgomock struct{}
}

// MockUsersUpdateResMockRecorder is the mock recorder for MockUsersUpdateRes.
type MockUsersUpdateResMockRecorder struct {
	mock *MockUsersUpdateRes
}

// NewMockUsersUpdateRes creates a new mock instance.
func NewMockUsersUpdateRes(ctrl *gomock.Controller) *MockUsersUpdateRes {
	mock := &MockUsersUpdateRes{ctrl: ctrl}
	mock.recorder = &MockUsersUpdateResMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersUpdateRes) EXPECT() *MockUsersUpdateResMockRecorder {
	return m.recorder
}

// usersUpdateRes mocks base method.
func (m *MockUsersUpdateRes) usersUpdateRes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "usersUpdateRes")
}

// usersUpdateRes indicates an expected call of usersUpdateRes.
func (mr *MockUsersUpdateResMockRecorder) usersUpdateRes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersUpdateRes", reflect.TypeOf((*MockUsersUpdateRes)(nil).usersUpdateRes))
}
