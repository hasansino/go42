// Code generated by ogen, DO NOT EDIT.

package auth

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleJwt handles jwt security.
	// JWT token in Authorization header (format: Bearer <token>).
	HandleJwt(ctx context.Context, operationName OperationName, t Jwt) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesJwt = map[string][]string{
	UsersCreateOperation: []string{
		"users:create",
	},
	UsersDeleteOperation: []string{
		"users:delete",
	},
	UsersGetOperation: []string{
		"users:read_others",
	},
	UsersListOperation: []string{
		"users:list",
	},
	UsersMeReadOperation: []string{
		"users:read_self",
	},
	UsersMeUpdateOperation: []string{
		"users:update_self",
	},
	UsersUpdateOperation: []string{
		"users:update",
	},
}

func (s *Server) securityJwt(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t Jwt
	const parameterName = "Authorization"
	value := req.Header.Get(parameterName)
	if value == "" {
		return ctx, false, nil
	}
	t.APIKey = value
	t.Roles = operationRolesJwt[operationName]
	rctx, err := s.sec.HandleJwt(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// Jwt provides jwt security value.
	// JWT token in Authorization header (format: Bearer <token>).
	Jwt(ctx context.Context, operationName OperationName, client *Client) (Jwt, error)
}

func (s *Client) securityJwt(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.Jwt(ctx, operationName, s)
	if err != nil {
		return errors.Wrap(err, "security source \"Jwt\"")
	}
	req.Header.Set("Authorization", t.APIKey)
	return nil
}
