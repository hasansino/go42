// Code generated by ogen, DO NOT EDIT.

package auth

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Login implements login operation.
	//
	// Login an existing user.
	//
	// POST /auth/login
	Login(ctx context.Context, req *LoginRequest) (LoginRes, error)
	// Logout implements logout operation.
	//
	// Invalidate user tokens.
	//
	// POST /auth/logout
	Logout(ctx context.Context, req *LogoutRequest) (LogoutRes, error)
	// Refresh implements refresh operation.
	//
	// Refresh user token.
	//
	// POST /auth/refresh
	Refresh(ctx context.Context, req *RefreshRequest) (RefreshRes, error)
	// Signup implements signup operation.
	//
	// Create a new user.
	//
	// POST /auth/signup
	Signup(ctx context.Context, req *SignUpRequest) (SignupRes, error)
	// UsersCreate implements users.create operation.
	//
	// Create a new user.
	//
	// POST /users
	UsersCreate(ctx context.Context, req *CreateUserRequest) (UsersCreateRes, error)
	// UsersDelete implements users.delete operation.
	//
	// Delete user.
	//
	// DELETE /users/{uuid}
	UsersDelete(ctx context.Context, params UsersDeleteParams) (UsersDeleteRes, error)
	// UsersGet implements users.get operation.
	//
	// Get user by UUID.
	//
	// GET /users/{uuid}
	UsersGet(ctx context.Context, params UsersGetParams) (UsersGetRes, error)
	// UsersList implements users.list operation.
	//
	// List users.
	//
	// GET /users
	UsersList(ctx context.Context, params UsersListParams) (UsersListRes, error)
	// UsersMeRead implements users.me.read operation.
	//
	// Retrieve current user information.
	//
	// GET /users/me
	UsersMeRead(ctx context.Context) (UsersMeReadRes, error)
	// UsersMeUpdate implements users.me.update operation.
	//
	// Update current user.
	//
	// PUT /users/me
	UsersMeUpdate(ctx context.Context, req *UpdateSelfRequest) (UsersMeUpdateRes, error)
	// UsersUpdate implements users.update operation.
	//
	// Update user.
	//
	// PUT /users/{uuid}
	UsersUpdate(ctx context.Context, req *UpdateUserRequest, params UsersUpdateParams) (UsersUpdateRes, error)
	// NewError creates *UnexpectedResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *UnexpectedResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
