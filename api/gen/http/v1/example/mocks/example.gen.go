// Code generated by MockGen. DO NOT EDIT.
// Source: gen/http/v1/example/example.gen.go
//
// Generated by this command:
//
//	mockgen -source gen/http/v1/example/example.gen.go -package mocks -destination gen/http/v1/example/mocks/example.gen.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	client "github.com/hasansino/go42/api/gen/http/v1/example"
	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateFruit mocks base method.
func (m *MockClientInterface) CreateFruit(ctx context.Context, body client.CreateFruitJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFruit", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFruit indicates an expected call of CreateFruit.
func (mr *MockClientInterfaceMockRecorder) CreateFruit(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruit", reflect.TypeOf((*MockClientInterface)(nil).CreateFruit), varargs...)
}

// CreateFruitWithBody mocks base method.
func (m *MockClientInterface) CreateFruitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFruitWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFruitWithBody indicates an expected call of CreateFruitWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateFruitWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruitWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateFruitWithBody), varargs...)
}

// DeleteFruitById mocks base method.
func (m *MockClientInterface) DeleteFruitById(ctx context.Context, id int, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFruitById", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFruitById indicates an expected call of DeleteFruitById.
func (mr *MockClientInterfaceMockRecorder) DeleteFruitById(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFruitById", reflect.TypeOf((*MockClientInterface)(nil).DeleteFruitById), varargs...)
}

// GetFruitById mocks base method.
func (m *MockClientInterface) GetFruitById(ctx context.Context, id int, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFruitById", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruitById indicates an expected call of GetFruitById.
func (mr *MockClientInterfaceMockRecorder) GetFruitById(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruitById", reflect.TypeOf((*MockClientInterface)(nil).GetFruitById), varargs...)
}

// GetFruits mocks base method.
func (m *MockClientInterface) GetFruits(ctx context.Context, params *client.GetFruitsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFruits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruits indicates an expected call of GetFruits.
func (mr *MockClientInterfaceMockRecorder) GetFruits(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruits", reflect.TypeOf((*MockClientInterface)(nil).GetFruits), varargs...)
}

// UpdateFruitById mocks base method.
func (m *MockClientInterface) UpdateFruitById(ctx context.Context, id int, body client.UpdateFruitByIdJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFruitById", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFruitById indicates an expected call of UpdateFruitById.
func (mr *MockClientInterfaceMockRecorder) UpdateFruitById(ctx, id, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruitById", reflect.TypeOf((*MockClientInterface)(nil).UpdateFruitById), varargs...)
}

// UpdateFruitByIdWithBody mocks base method.
func (m *MockClientInterface) UpdateFruitByIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFruitByIdWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFruitByIdWithBody indicates an expected call of UpdateFruitByIdWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateFruitByIdWithBody(ctx, id, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruitByIdWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateFruitByIdWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateFruitWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateFruitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.CreateFruitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFruitWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*client.CreateFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFruitWithBodyWithResponse indicates an expected call of CreateFruitWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateFruitWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruitWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateFruitWithBodyWithResponse), varargs...)
}

// CreateFruitWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateFruitWithResponse(ctx context.Context, body client.CreateFruitJSONRequestBody, reqEditors ...client.RequestEditorFn) (*client.CreateFruitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFruitWithResponse", varargs...)
	ret0, _ := ret[0].(*client.CreateFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFruitWithResponse indicates an expected call of CreateFruitWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateFruitWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruitWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateFruitWithResponse), varargs...)
}

// DeleteFruitByIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteFruitByIdWithResponse(ctx context.Context, id int, reqEditors ...client.RequestEditorFn) (*client.DeleteFruitByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFruitByIdWithResponse", varargs...)
	ret0, _ := ret[0].(*client.DeleteFruitByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFruitByIdWithResponse indicates an expected call of DeleteFruitByIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteFruitByIdWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFruitByIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteFruitByIdWithResponse), varargs...)
}

// GetFruitByIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetFruitByIdWithResponse(ctx context.Context, id int, reqEditors ...client.RequestEditorFn) (*client.GetFruitByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFruitByIdWithResponse", varargs...)
	ret0, _ := ret[0].(*client.GetFruitByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruitByIdWithResponse indicates an expected call of GetFruitByIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetFruitByIdWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruitByIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetFruitByIdWithResponse), varargs...)
}

// GetFruitsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetFruitsWithResponse(ctx context.Context, params *client.GetFruitsParams, reqEditors ...client.RequestEditorFn) (*client.GetFruitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFruitsWithResponse", varargs...)
	ret0, _ := ret[0].(*client.GetFruitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruitsWithResponse indicates an expected call of GetFruitsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetFruitsWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruitsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetFruitsWithResponse), varargs...)
}

// UpdateFruitByIdWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateFruitByIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.UpdateFruitByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFruitByIdWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*client.UpdateFruitByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFruitByIdWithBodyWithResponse indicates an expected call of UpdateFruitByIdWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateFruitByIdWithBodyWithResponse(ctx, id, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruitByIdWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateFruitByIdWithBodyWithResponse), varargs...)
}

// UpdateFruitByIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateFruitByIdWithResponse(ctx context.Context, id int, body client.UpdateFruitByIdJSONRequestBody, reqEditors ...client.RequestEditorFn) (*client.UpdateFruitByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFruitByIdWithResponse", varargs...)
	ret0, _ := ret[0].(*client.UpdateFruitByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFruitByIdWithResponse indicates an expected call of UpdateFruitByIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateFruitByIdWithResponse(ctx, id, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruitByIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateFruitByIdWithResponse), varargs...)
}
