// Code generated by MockGen. DO NOT EDIT.
// Source: gen/example/v1/example_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source gen/example/v1/example_grpc.pb.go -package mocks -destination gen/example/v1/mocks/example_grpc.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/hasansino/go42/api/gen/example/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockExampleServiceClient is a mock of ExampleServiceClient interface.
type MockExampleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExampleServiceClientMockRecorder
	isgomock struct{}
}

// MockExampleServiceClientMockRecorder is the mock recorder for MockExampleServiceClient.
type MockExampleServiceClientMockRecorder struct {
	mock *MockExampleServiceClient
}

// NewMockExampleServiceClient creates a new mock instance.
func NewMockExampleServiceClient(ctrl *gomock.Controller) *MockExampleServiceClient {
	mock := &MockExampleServiceClient{ctrl: ctrl}
	mock.recorder = &MockExampleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleServiceClient) EXPECT() *MockExampleServiceClientMockRecorder {
	return m.recorder
}

// CreateFruit mocks base method.
func (m *MockExampleServiceClient) CreateFruit(ctx context.Context, in *v1.CreateFruitRequest, opts ...grpc.CallOption) (*v1.CreateFruitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFruit", varargs...)
	ret0, _ := ret[0].(*v1.CreateFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFruit indicates an expected call of CreateFruit.
func (mr *MockExampleServiceClientMockRecorder) CreateFruit(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruit", reflect.TypeOf((*MockExampleServiceClient)(nil).CreateFruit), varargs...)
}

// DeleteFruit mocks base method.
func (m *MockExampleServiceClient) DeleteFruit(ctx context.Context, in *v1.DeleteFruitRequest, opts ...grpc.CallOption) (*v1.DeleteFruitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFruit", varargs...)
	ret0, _ := ret[0].(*v1.DeleteFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFruit indicates an expected call of DeleteFruit.
func (mr *MockExampleServiceClientMockRecorder) DeleteFruit(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFruit", reflect.TypeOf((*MockExampleServiceClient)(nil).DeleteFruit), varargs...)
}

// GetFruit mocks base method.
func (m *MockExampleServiceClient) GetFruit(ctx context.Context, in *v1.GetFruitRequest, opts ...grpc.CallOption) (*v1.GetFruitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFruit", varargs...)
	ret0, _ := ret[0].(*v1.GetFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruit indicates an expected call of GetFruit.
func (mr *MockExampleServiceClientMockRecorder) GetFruit(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruit", reflect.TypeOf((*MockExampleServiceClient)(nil).GetFruit), varargs...)
}

// ListFruits mocks base method.
func (m *MockExampleServiceClient) ListFruits(ctx context.Context, in *v1.ListFruitsRequest, opts ...grpc.CallOption) (*v1.ListFruitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFruits", varargs...)
	ret0, _ := ret[0].(*v1.ListFruitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFruits indicates an expected call of ListFruits.
func (mr *MockExampleServiceClientMockRecorder) ListFruits(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFruits", reflect.TypeOf((*MockExampleServiceClient)(nil).ListFruits), varargs...)
}

// UpdateFruit mocks base method.
func (m *MockExampleServiceClient) UpdateFruit(ctx context.Context, in *v1.UpdateFruitRequest, opts ...grpc.CallOption) (*v1.UpdateFruitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFruit", varargs...)
	ret0, _ := ret[0].(*v1.UpdateFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFruit indicates an expected call of UpdateFruit.
func (mr *MockExampleServiceClientMockRecorder) UpdateFruit(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruit", reflect.TypeOf((*MockExampleServiceClient)(nil).UpdateFruit), varargs...)
}

// MockExampleServiceServer is a mock of ExampleServiceServer interface.
type MockExampleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockExampleServiceServerMockRecorder
	isgomock struct{}
}

// MockExampleServiceServerMockRecorder is the mock recorder for MockExampleServiceServer.
type MockExampleServiceServerMockRecorder struct {
	mock *MockExampleServiceServer
}

// NewMockExampleServiceServer creates a new mock instance.
func NewMockExampleServiceServer(ctrl *gomock.Controller) *MockExampleServiceServer {
	mock := &MockExampleServiceServer{ctrl: ctrl}
	mock.recorder = &MockExampleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleServiceServer) EXPECT() *MockExampleServiceServerMockRecorder {
	return m.recorder
}

// CreateFruit mocks base method.
func (m *MockExampleServiceServer) CreateFruit(arg0 context.Context, arg1 *v1.CreateFruitRequest) (*v1.CreateFruitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFruit", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFruit indicates an expected call of CreateFruit.
func (mr *MockExampleServiceServerMockRecorder) CreateFruit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFruit", reflect.TypeOf((*MockExampleServiceServer)(nil).CreateFruit), arg0, arg1)
}

// DeleteFruit mocks base method.
func (m *MockExampleServiceServer) DeleteFruit(arg0 context.Context, arg1 *v1.DeleteFruitRequest) (*v1.DeleteFruitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFruit", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFruit indicates an expected call of DeleteFruit.
func (mr *MockExampleServiceServerMockRecorder) DeleteFruit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFruit", reflect.TypeOf((*MockExampleServiceServer)(nil).DeleteFruit), arg0, arg1)
}

// GetFruit mocks base method.
func (m *MockExampleServiceServer) GetFruit(arg0 context.Context, arg1 *v1.GetFruitRequest) (*v1.GetFruitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFruit", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFruit indicates an expected call of GetFruit.
func (mr *MockExampleServiceServerMockRecorder) GetFruit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFruit", reflect.TypeOf((*MockExampleServiceServer)(nil).GetFruit), arg0, arg1)
}

// ListFruits mocks base method.
func (m *MockExampleServiceServer) ListFruits(arg0 context.Context, arg1 *v1.ListFruitsRequest) (*v1.ListFruitsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFruits", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListFruitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFruits indicates an expected call of ListFruits.
func (mr *MockExampleServiceServerMockRecorder) ListFruits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFruits", reflect.TypeOf((*MockExampleServiceServer)(nil).ListFruits), arg0, arg1)
}

// UpdateFruit mocks base method.
func (m *MockExampleServiceServer) UpdateFruit(arg0 context.Context, arg1 *v1.UpdateFruitRequest) (*v1.UpdateFruitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFruit", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateFruitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFruit indicates an expected call of UpdateFruit.
func (mr *MockExampleServiceServerMockRecorder) UpdateFruit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFruit", reflect.TypeOf((*MockExampleServiceServer)(nil).UpdateFruit), arg0, arg1)
}

// mustEmbedUnimplementedExampleServiceServer mocks base method.
func (m *MockExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExampleServiceServer")
}

// mustEmbedUnimplementedExampleServiceServer indicates an expected call of mustEmbedUnimplementedExampleServiceServer.
func (mr *MockExampleServiceServerMockRecorder) mustEmbedUnimplementedExampleServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExampleServiceServer", reflect.TypeOf((*MockExampleServiceServer)(nil).mustEmbedUnimplementedExampleServiceServer))
}

// MockUnsafeExampleServiceServer is a mock of UnsafeExampleServiceServer interface.
type MockUnsafeExampleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeExampleServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeExampleServiceServerMockRecorder is the mock recorder for MockUnsafeExampleServiceServer.
type MockUnsafeExampleServiceServerMockRecorder struct {
	mock *MockUnsafeExampleServiceServer
}

// NewMockUnsafeExampleServiceServer creates a new mock instance.
func NewMockUnsafeExampleServiceServer(ctrl *gomock.Controller) *MockUnsafeExampleServiceServer {
	mock := &MockUnsafeExampleServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeExampleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeExampleServiceServer) EXPECT() *MockUnsafeExampleServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedExampleServiceServer mocks base method.
func (m *MockUnsafeExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExampleServiceServer")
}

// mustEmbedUnimplementedExampleServiceServer indicates an expected call of mustEmbedUnimplementedExampleServiceServer.
func (mr *MockUnsafeExampleServiceServerMockRecorder) mustEmbedUnimplementedExampleServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExampleServiceServer", reflect.TypeOf((*MockUnsafeExampleServiceServer)(nil).mustEmbedUnimplementedExampleServiceServer))
}
