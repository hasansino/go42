name: claude

# Claude code agent.

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted,edited]

concurrency:
  group: claude-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: false

jobs:
  claude:
    name: claude
    # 1. Global switch should be set to 'true'
    # 2. Event must be triggered by a user (not a bot)
    # 3. Check if the user have permission to invoke agent
    # 4. Check if triggering event contains '@claude' keyword
    # 5. Skip draft PRs
    if: |
      vars.CLAUDE_ENABLE != 'false' &&
      (
        (github.event_name == 'issue_comment' && github.event.comment.user.type != 'Bot') ||
        (github.event_name == 'pull_request_review_comment' && github.event.comment.user.type != 'Bot') ||
        (github.event_name == 'pull_request_review' && github.event.review.user.type != 'Bot') ||
        (github.event_name == 'issues' && github.event.issue.user.type != 'Bot')
      ) &&
      (
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association) ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
      ) &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (
            github.event_name == 'issues' && 
            (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))
        )
      ) &&
      (
        github.event.pull_request.draft != true &&
        (github.event.issue.pull_request == null || github.event.issue.draft != true)
      )
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Prepare AI environment'
        uses: ./.github/actions/ai-prepare-env

      - name: 'Read CLAUDE.md'
        id: read_prompt
        env:
          PROMPT_FILE: CLAUDE.md
        run: |-
          set -euo pipefail
          if [[ -f "${PROMPT_FILE}" ]]; then
            AGENT_PROMPT=$(cat CLAUDE.md)
          else
            exit 1
          fi
          {
            echo "agent_promt<<EOF"
            echo "${AGENT_PROMPT}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"
      
      - name: 'Read .mcp.json'
        id: read_mcp_config
        run: |-
          set -euo pipefail
          if [[ -f ".mcp.json" ]]; then
            MCP_CONFIG=$(cat .mcp.json)
          else
            echo "Error: .mcp.json not found" >&2
            exit 1
          fi
          {
            echo "mcp_config<<EOF"
            echo "${MCP_CONFIG}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Read settings.json'
        id: read_settings
        run: |-
          set -euo pipefail
          if [[ -f ".mcp.json" ]]; then
            SETTINGS=$(cat .claude/settings.json)
          else
            echo "Error: .claude/settings.json not found" >&2
            exit 1
          fi
          {
            echo "settings<<EOF"
            echo "${SETTINGS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Acknowledge request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |-
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            gh api -X POST \
              "/repos/${REPOSITORY}/issues/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || true
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            gh api -X POST \
              "/repos/${REPOSITORY}/pulls/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || true
          fi

      - name: 'Run Claude Code'
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          additional_permissions: |
            actions: read
            contents: write
          model: 'claude-opus-4-1-20250805'
          trigger_phrase: '@claude'
          use_commit_signing: true
          override_prompt: ${{ steps.read_prompt.outputs.agent_promt }}
          mcp_config: ${{ steps.read_mcp_config.outputs.mcp_config }}
          settings: ${{ steps.read_settings.outputs.settings }}
          allowed_tools: |
            Bash(git status*)
            Bash(git diff*)
            Bash(git add*)
            Bash(git commit*)
            Bash(git push*)
            Bash(git checkout*)
            Bash(git branch*)
            Bash(git log*)
            Bash(git remote*)
            Bash(git fetch*)
            Bash(git pull*)
            Bash(gh pr create*)
            Bash(gh pr view*)
            Bash(gh pr list*)
            Bash(gh pr comment*)
            Bash(gh issue view*)
            Bash(gh issue comment*)
            Bash(go mod tidy*)
            Bash(go mod download*)
            Bash(go generate*)
            Bash(go test*)
            Bash(go run*)
            Bash(go build*)
            Bash(make generate*)
            Bash(make lint*)
            Bash(make test-unit*)
            Bash(make test-integration*)
            Bash(make run*)
            Bash(make build*)
            Bash(golangci-lint*)
            Bash(buf*)
            Bash(redocly*)
            mcp__kwb__search
            mcp__kwb__list_files
            mcp__kwb__get_file
