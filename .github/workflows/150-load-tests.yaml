name: load-tests

# Load tests.
# Simulates load on application and records statistics.
# When this workflow is triggered in pull request, it will post statistics to pull request.

on:
  workflow_dispatch:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
        description: "runs_on"
      continue_on_error:
        required: true
        type: boolean
        default: false
        description: "continue_on_error"
      service_name:
        required: true
        type: string
        default: "go42"
        description: "service_name"
      image_tag:
        required: true
        type: string
        default: "tmp"
        description: "image_tag"
      database_engine:
        required: false
        type: string
        default: ""
        description: "database_engine (leave empty to test all)"
  workflow_call:
    inputs:
      runs_on:
        required: true
        type: string
      continue_on_error:
        required: true
        type: boolean
      service_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      database_engine:
        required: false
        type: string
        default: ""

permissions: {}

jobs:
  report:
    name: report
    runs-on: ${{ inputs.runs_on }}
    needs: load-tests
    if: always()
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: k6-summary-*
          merge-multiple: true
      - uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read all k6 summary files
            const files = fs.readdirSync('.').filter(f => f.startsWith('k6-summary-') && f.endsWith('.json'));
            
            let allResults = [];
            
            for (const file of files) {
              const match = file.match(/k6-summary-(\w+)-(\w+)-v1\.json/);
              if (!match) continue;
              
              const [_, protocol, database] = match;
              const results = JSON.parse(fs.readFileSync(file, 'utf8'));
              
              allResults.push({ protocol, database, results });
            }
            
            // Sort results for consistent output
            allResults.sort((a, b) => {
              if (a.protocol !== b.protocol) return a.protocol.localeCompare(b.protocol);
              return a.database.localeCompare(b.database);
            });
            
            // Generate combined report as workflow annotations
            core.notice('# Load Test Results Summary');
            
            for (const { protocol, database, results } of allResults) {
              let summary = `\n## ${protocol.toUpperCase()} v1 (${database})\n`;
              
              if (protocol === 'http') {
                const vusMax = results.metrics.vus_max?.value || 'N/A';
                const vusMin = results.metrics.vus?.min || 0;
                const vusMaxRange = results.metrics.vus?.max || 0;
                const httpReqsCount = results.metrics.http_reqs?.count || 0;
                const httpReqsRate = results.metrics.http_reqs?.rate || 0;
                const httpReqDurationAvg = results.metrics.http_req_duration?.avg || 0;
                const httpReqDurationP95 = results.metrics.http_req_duration?.["p(95)"] || 0;
                const httpReqFailedPasses = results.metrics.http_req_failed?.passes || 0;
                const httpReqFailedValue = results.metrics.http_req_failed?.value || 0;
                const checksPasses = results.metrics.checks?.passes || 0;
                const checksFails = results.metrics.checks?.fails || 0;
                const totalChecks = checksPasses + checksFails;
                const successRate = totalChecks > 0 ? (checksPasses / totalChecks * 100) : 0;
                
                summary += `- Virtual Users: ${vusMax} max (${vusMin}-${vusMaxRange})\n`;
                summary += `- Total Requests: ${httpReqsCount} @ ${httpReqsRate.toFixed(2)}/sec\n`;
                summary += `- Response Time: Avg: ${httpReqDurationAvg.toFixed(2)}ms / P95: ${httpReqDurationP95.toFixed(2)}ms\n`;
                summary += `- Failed Requests: ${httpReqFailedPasses} (${(httpReqFailedValue * 100).toFixed(2)}%)\n`;
                summary += `- Success Rate: ${successRate.toFixed(2)}%\n`;
              } else if (protocol === 'grpc') {
                const vusMax = results.metrics.vus_max?.value || 'N/A';
                const vusMin = results.metrics.vus?.min || 0;
                const vusMaxRange = results.metrics.vus?.max || 0;
                const iterationsCount = results.metrics.iterations?.count || 0;
                const iterationsRate = results.metrics.iterations?.rate || 0;
                const grpcReqDurationAvg = results.metrics.grpc_req_duration?.avg || 0;
                const grpcReqDurationP95 = results.metrics.grpc_req_duration?.["p(95)"] || 0;
                const checksPasses = results.metrics.checks?.passes || 0;
                const checksFails = results.metrics.checks?.fails || 0;
                const totalChecks = checksPasses + checksFails;
                const successRate = totalChecks > 0 ? (checksPasses / totalChecks * 100) : 0;
                
                summary += `- Virtual Users: ${vusMax} max (${vusMin}-${vusMaxRange})\n`;
                summary += `- Total Requests: ${iterationsCount} @ ${iterationsRate.toFixed(2)}/sec\n`;
                summary += `- Response Time: Avg: ${(grpcReqDurationAvg * 1000).toFixed(2)}ms / P95: ${(grpcReqDurationP95 * 1000).toFixed(2)}ms\n`;
                summary += `- Failed Requests: ${checksFails} (${totalChecks > 0 ? (checksFails / totalChecks * 100).toFixed(2) : 0}%)\n`;
                summary += `- Success Rate: ${successRate.toFixed(2)}%\n`;
              }
              
              core.notice(summary);
            }
  load-tests:
    name: load-tests-${{ matrix.protocol }}-${{ matrix.database }}
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      packages: read
      pull-requests: write
      issues: write
    strategy:
      matrix:
        protocol: [http, grpc]
        database: [sqlite, mysql, pgsql]
        include:
          # HTTP configurations
          - protocol: http
            database: sqlite
            database_engine: sqlite
            app_port: 44441
            grpc_port: 55551
            test_path: ./tests/load/http/v1/auth_test.js
            env_name: ci-load-tests-http
            server_address_env: HTTP_SERVER_ADDRESS
            grpc_auth_enabled: true
          - protocol: http
            database: mysql
            database_engine: mysql
            app_port: 44442
            grpc_port: 55552
            test_path: ./tests/load/http/v1/auth_test.js
            env_name: ci-load-tests-http
            server_address_env: HTTP_SERVER_ADDRESS
            grpc_auth_enabled: true
          - protocol: http
            database: pgsql
            database_engine: pgsql
            app_port: 44443
            grpc_port: 55553
            test_path: ./tests/load/http/v1/auth_test.js
            env_name: ci-load-tests-http
            server_address_env: HTTP_SERVER_ADDRESS
            grpc_auth_enabled: true
          # GRPC configurations
          - protocol: grpc
            database: sqlite
            database_engine: sqlite
            app_port: 44444
            grpc_port: 55554
            test_path: ./tests/load/grpc/v1/auth_test.js
            env_name: ci-load-tests
            server_address_env: GRPC_SERVER_ADDRESS
            grpc_auth_enabled: false
          - protocol: grpc
            database: mysql
            database_engine: mysql
            app_port: 44445
            grpc_port: 55555
            test_path: ./tests/load/grpc/v1/auth_test.js
            env_name: ci-load-tests
            server_address_env: GRPC_SERVER_ADDRESS
            grpc_auth_enabled: false
          - protocol: grpc
            database: pgsql
            database_engine: pgsql
            app_port: 44446
            grpc_port: 55556
            test_path: ./tests/load/grpc/v1/auth_test.js
            env_name: ci-load-tests
            server_address_env: GRPC_SERVER_ADDRESS
            grpc_auth_enabled: false
        exclude:
          # Exclude combinations if specific database_engine is requested
          - database: ${{ inputs.database_engine != '' && inputs.database_engine != 'sqlite' && 'sqlite' || '' }}
          - database: ${{ inputs.database_engine != '' && inputs.database_engine != 'mysql' && 'mysql' || '' }}
          - database: ${{ inputs.database_engine != '' && inputs.database_engine != 'pgsql' && 'pgsql' || '' }}
    services:
      mysql:
        image: ${{ matrix.database == 'mysql' && 'mysql:latest' || '' }}
        ports:
          - 3306:3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: qwerty
          MYSQL_DATABASE: go42
          MYSQL_ROOT_PASSWORD: qwerty
        options: >-
          --health-cmd "mysql -h localhost -u user -pqwerty -D go42 -e 'SELECT 1' || exit 1"
          --health-start-period 30s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      pgsql:
        image: ${{ matrix.database == 'pgsql' && 'postgres:latest' || '' }}
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: qwerty
          POSTGRES_DB: go42
        options: >-
          --health-cmd "PGPASSWORD=qwerty psql -h localhost -U user -d go42 -c 'SELECT 1' || exit 1"
          --health-start-period 10s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      app:
        image: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
        ports:
          - ${{ matrix.app_port }}:8080  # unique ports to avoid conflicts on self-hosted runners
          - ${{ matrix.grpc_port }}:50051 # unique ports to avoid conflicts on self-hosted runners
        env:
          LOG_LEVEL: warn
          ENVIRONMENT: ${{ matrix.env_name }}
          SERVER_HTTP_LISTEN: :8080
          SERVER_GRPC_LISTEN: :50051
          SERVER_GRPC_AUTHORIZATION_ENABLED: ${{ matrix.grpc_auth_enabled }}
          DATABASE_ENGINE: ${{ matrix.database_engine }}
          DATABASE_MYSQL_MASTER_HOST: mysql
          DATABASE_MYSQL_SLAVE_HOST: mysql
          DATABASE_PGSQL_MASTER_HOST: pgsql
          DATABASE_PGSQL_SLAVE_HOST: pgsql
        options: >-
          --health-cmd "curl -f http://localhost:8080/health || exit 1"
          --health-start-period 1s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      - uses: grafana/run-k6-action@v1
        with:
          path: ${{ matrix.test_path }}
          flags: --summary-export=k6-summary-${{ matrix.protocol }}-${{ matrix.database }}-v1.json
        env:
          ${{ matrix.server_address_env }}: ${{ matrix.protocol == 'http' && format('http://localhost:{0}', matrix.app_port) || format('localhost:{0}', matrix.grpc_port) }}
      - uses: actions/upload-artifact@v4
        with:
          name: k6-summary-${{ matrix.protocol }}-${{ matrix.database }}-v1
          path: k6-summary-${{ matrix.protocol }}-${{ matrix.database }}-v1.json
