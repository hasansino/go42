name: load-tests

# Load tests.
# Simulates load on application and records statistics.
# When this workflow is triggered in pull request, it will post statistics to pull request.

on:
  workflow_dispatch:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
        description: "runs_on"
      continue_on_error:
        required: true
        type: boolean
        default: false
        description: "continue_on_error"
      service_name:
        required: true
        type: string
        default: "go42"
        description: "service_name"
      image_tag:
        required: true
        type: string
        default: "tmp"
        description: "image_tag"
      database_engine:
        required: true
        type: string
        default: "sqlite"
        description: "database_engine"
  workflow_call:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
      continue_on_error:
        required: true
        type: boolean
        default: false
      service_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      database_engine:
        required: true
        type: string

permissions:
  packages: read
  pull-requests: write
  issues: write

jobs:
  load-tests-http:
    # ----
    name: load-tests-http
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    # ----
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: qwerty
          MYSQL_DATABASE: go42
          MYSQL_ROOT_PASSWORD: qwerty
        options: >-
          --health-cmd "mysql -h localhost -u user -pqwerty -D go42 -e 'SELECT 1' || exit 1"
          --health-start-period 30s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      pgsql:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: qwerty
          POSTGRES_DB: go42
        options: >-
          --health-cmd "PGPASSWORD=qwerty psql -h localhost -U user -d go42 -c 'SELECT 1' || exit 1"
          --health-start-period 10s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      app:
        image: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
        ports:
          - 44443:8080  # should be unique to avoid conflicts on self-hosted runners
        env:
          LOG_LEVEL: warn
          ENVIRONMENT: ci-load-tests-http
          SERVER_HTTP_LISTEN: :8080
          DATABASE_ENGINE: ${{ inputs.database_engine || 'sqlite' }}
          DATABASE_MYSQL_MASTER_HOST: mysql
          DATABASE_MYSQL_SLAVE_HOST: mysql
          DATABASE_PGSQL_MASTER_HOST: pgsql
          DATABASE_PGSQL_SLAVE_HOST: pgsql
        options: >-
          --health-cmd "curl -f http://localhost:8080/health || exit 1"
          --health-start-period 1s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    # ----
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      # http tests
      - uses: grafana/run-k6-action@v1
        with:
          path: ./tests/load/http/v1/auth_test.js
          flags: --summary-export=k6-summary-http-v1.json
        env:
          HTTP_SERVER_ADDRESS: http://localhost:44443
      # ----
      - uses: actions/upload-artifact@v4
        with:
          name: k6-summary-http-v1
          path: k6-summary-http-v1.json
      # ----
      - if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            const resultsHttpV1 = JSON.parse(fs.readFileSync('k6-summary-http-v1.json', 'utf8'));
            
            const summary = `## Load Test Results
            
            ### HTTP v1
            
            | Metric          | Value  |
            |-----------------|--------|
            | Virtual Users   | ${resultsHttpV1.metrics.vus_max.value} max (${resultsHttpV1.metrics.vus.min}-${resultsHttpV1.metrics.vus.max}) |
            | Total Requests  | ${resultsHttpV1.metrics.http_reqs.count} @ ${resultsHttpV1.metrics.http_reqs.rate.toFixed(2)}/sec |
            | Response Time   | Avg: ${resultsHttpV1.metrics.http_req_duration.avg.toFixed(2)}ms / P95: ${resultsHttpV1.metrics.http_req_duration["p(95)"].toFixed(2)}ms |
            | Failed Requests | ${resultsHttpV1.metrics.http_req_failed.passes} (${(resultsHttpV1.metrics.http_req_failed.value * 100).toFixed(2)}%) |
            | Success Rate    | ${(resultsHttpV1.metrics.checks.passes / (resultsHttpV1.metrics.checks.passes + resultsHttpV1.metrics.checks.fails) * 100).toFixed(2)}% |
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
  load-tests-grpc:
    # ----
    name: load-tests-grpc
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    # ----
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: qwerty
          MYSQL_DATABASE: go42
          MYSQL_ROOT_PASSWORD: qwerty
        options: >-
          --health-cmd "mysql -h localhost -u user -pqwerty -D go42 -e 'SELECT 1' || exit 1"
          --health-start-period 30s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      pgsql:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: qwerty
          POSTGRES_DB: go42
        options: >-
          --health-cmd "PGPASSWORD=qwerty psql -h localhost -U user -d go42 -c 'SELECT 1' || exit 1"
          --health-start-period 10s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      app:
        image: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
        ports:
          - 44443:8080  # should be unique to avoid conflicts on self-hosted runners
          - 55553:50051 # should be unique to avoid conflicts on self-hosted runners
        env:
          LOG_LEVEL: warn
          ENVIRONMENT: ci-load-tests
          SERVER_HTTP_LISTEN: :8080
          SERVER_GRPC_LISTEN: :50051
          SERVER_GRPC_AUTHORIZATION_ENABLED: false
          DATABASE_ENGINE: ${{ inputs.database_engine || 'sqlite' }}
          DATABASE_MYSQL_MASTER_HOST: mysql
          DATABASE_MYSQL_SLAVE_HOST: mysql
          DATABASE_PGSQL_MASTER_HOST: pgsql
          DATABASE_PGSQL_SLAVE_HOST: pgsql
        options: >-
          --health-cmd "curl -f http://localhost:8080/health || exit 1"
          --health-start-period 1s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    # ----
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      - uses: grafana/run-k6-action@v1
        with:
          path: ./tests/load/grpc/v1/auth_test.js
          flags: --summary-export=k6-summary-grpc-v1.json
        env:
          GRPC_SERVER_ADDRESS: localhost:55553
      # ---
      - uses: actions/upload-artifact@v4
        with:
          name: k6-summary-grpc-v1
          path: k6-summary-grpc-v1.json
      # ---
      - if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            const resultsGrpcV1 = JSON.parse(fs.readFileSync('k6-summary-grpc-v1.json', 'utf8'));
            
            const summary = `## Load Test Results
            
            ### GRPC v1
            
            | Metric          | Value |
            |-----------------|-------|
            | Virtual Users   | ${resultsGrpcV1.metrics.vus_max.value} max (${resultsGrpcV1.metrics.vus.min}-${resultsGrpcV1.metrics.vus.max}) |
            | Total Requests  | ${resultsGrpcV1.metrics.iterations.count} @ ${resultsGrpcV1.metrics.iterations.rate.toFixed(2)}/sec |
            | Response Time   | Avg: ${(resultsGrpcV1.metrics.grpc_req_duration.avg * 1000).toFixed(2)}ms / P95: ${(resultsGrpcV1.metrics.grpc_req_duration["p(95)"] * 1000).toFixed(2)}ms |
            | Failed Requests | ${resultsGrpcV1.metrics.checks.fails} (${(resultsGrpcV1.metrics.checks.fails / (resultsGrpcV1.metrics.checks.passes + resultsGrpcV1.metrics.checks.fails) * 100).toFixed(2)}%) |
            | Success Rate    | ${(resultsGrpcV1.metrics.checks.passes / (resultsGrpcV1.metrics.checks.passes + resultsGrpcV1.metrics.checks.fails) * 100).toFixed(2)}% |      
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
