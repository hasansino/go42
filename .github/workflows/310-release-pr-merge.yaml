name: release-pr-merge

# After auto-release pull request is merged, create release and delete branch.

on:
  pull_request:
    types: [closed]

permissions: {}

jobs:
  release-pr-merge:
    if: |
      github.event.pull_request.merged == true && 
      startsWith(github.event.pull_request.title, 'Release') &&
      github.event.pull_request.user.login == 'github-actions[bot]'
    name: release-pr-merge
    runs-on: ubuntu-latest
    continue-on-error: false
    permissions:
      contents: write
    # ----
    steps:
      - name: 'Checkout repository with full history'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # ----
      - id: extract_semver
        name: 'Extract version from PR title'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          VERSION=$(echo "$PR_TITLE" | grep -oP '\d+\.\d+\.\d+' | head -n 1)
          if [ -z "$VERSION" ]; then
            echo "Error: No valid semver version found in PR title"
            exit 1
          fi
          echo "version=v$VERSION" >> "$GITHUB_OUTPUT"
      # ----
      - id: extract_summary
        name: 'Extract summary from PR body'
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          # Extract the summary part from PR body (everything after the --- separator)
          # The PR body format includes metadata at the top, then ---, then the actual summary
          SUMMARY=$(echo "$PR_BODY" | awk '/^---$/{p=1; next} p' | sed '/^$/d')
          
          if [ -z "$SUMMARY" ]; then
            echo "No summary found in PR body, using default"
            SUMMARY="Release ${{ steps.extract_semver.outputs.version }}"
          fi
          
          # Save summary to file to handle multiline content properly
          echo "$SUMMARY" > release_summary.md
          
          echo "Summary extracted successfully"
      # ----
      - name: 'Create GitHub release'
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.extract_semver.outputs.version }}
          tag_name: ${{ steps.extract_semver.outputs.version }}
          body_path: release_summary.md
          generate_release_notes: true
          append_body: true
          make_latest: true
      # ----
      - name: 'Delete PR branch after merge'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          REPOSITORY: ${{ github.repository }}
        run: |
          # Check if branch exists before trying to delete
          if gh api "repos/${REPOSITORY}/git/refs/heads/${BRANCH_NAME}" >/dev/null 2>&1; then
            echo "Branch ${BRANCH_NAME} exists, deleting..."
            gh api -X DELETE "repos/${REPOSITORY}/git/refs/heads/${BRANCH_NAME}"
            echo "Branch ${BRANCH_NAME} deleted successfully"
          else
            echo "Branch ${BRANCH_NAME} does not exist or was already deleted"
          fi
