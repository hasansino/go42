name: unified-workflow

# Unified workflow - linting, testing, and security scanning.
# This workflow is designed for development and testing stages.
#
# Actions are executed by `runners` that are provided by GitHub.
# They are not free and billed per minute, 2000 minutes per month are free for private repositories.
# For public repositories, actions are free without limits. (common sense still applies)
# Besides actions, there are also storage limits for packages (like docker images).
#
# Running this workflow too often can ramp-up actions costs significantly.
# One way to mitigate this, is to use a self-hosted runners.
# @see https://docs.github.com/en/actions/hosting-your-own-runners
#
# @note `with` arguments are repeated because `with` does not support context
# @see https://github.com/orgs/community/discussions/25246
# May be fixed with https://github.com/marketplace/actions/dynamic-uses
#
# @tip to use output from job X in job Y, use `needs: [X]` in job Y

on:
  # manual trigger
  workflow_dispatch:
  # push or merge to master
  push:
    branches: [ master ]
  # pull request targeting master branch created or updated
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write
  security-events: write
  pull-requests: write
  issues: write
  actions: read

jobs:

  # stage 1: linting

  git-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-git-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: false

  golangci-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-golangci-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  docker-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-docker-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  proto-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-proto-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  openapi-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-openapi-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  markdown-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-markdown-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  writing-lint:
    if: |
      github.event_name == 'workflow_dispatch' || !endsWith(github.actor, '[bot]') && 
      ( github.event.head_commit.message != 'initial commit' 
      && !startsWith(github.event.head_commit.message, 'auto-release-'))
    uses: ./.github/workflows/110-writing-lint.yaml
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  # stage 2: unit tests

  unit-tests:
    uses: ./.github/workflows/120-unit-tests.yaml
    needs: [ git-lint, golangci-lint, docker-lint, proto-lint, openapi-lint, markdown-lint, writing-lint ]
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  # stage 3: pre-build security scans

  security:
    uses: ./.github/workflows/130-security.yaml
    needs: [ unit-tests ]
    with:
      runs_on: ubuntu-latest
      continue_on_error: true

  # stage 4: build artifacts

  docker-prepare-tag:
    runs-on: ubuntu-latest
    needs: [ unit-tests ]
    outputs:
      tag: ${{ steps.docker-prepare-tag.outputs.tag }}
    steps:
      - id:  docker-prepare-tag
        run: |
          REF_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          IMAGE_TAG=$(echo "$REF_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[\/ @]/-/g')
          IMAGE_TAG="${IMAGE_TAG:0:60}-${GITHUB_RUN_ID}"
          echo "tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "$IMAGE_TAG"

  docker-build:
    uses: ./.github/workflows/140-docker-build.yaml
    needs: [ docker-prepare-tag ]
    with:
      runs_on: ubuntu-latest
      continue_on_error: false
      service_name: "go42"
      image_tag: ${{ needs.docker-prepare-tag.outputs.tag }}
      platforms: "linux/amd64,linux/arm64"
      attestation: ${{ github.ref == 'refs/heads/master' }}
      generate_sbom: true
      attestation_sbom: false

  # stage 5: post-build security scans

  security-extra-group:
    name: "Security Scans"
    runs-on: ubuntu-latest
    needs: [ docker-prepare-tag, docker-build ]
    steps:
      - run: echo "Grouping job for security scans"
    outputs:
      ready: ${{ steps.ready.outputs.ok }}

  security-extra:
    uses: ./.github/workflows/140-security-extra.yaml
    needs: [ security-extra-group ]
    with:
      runs_on: ubuntu-latest
      continue_on_error: true
      service_name: "go42"
      image_tag: ${{ needs.docker-prepare-tag.outputs.tag }}

  # stage 6: integration & load tests

  functional-tests-group:
    name: "Integration & Load Tests"
    runs-on: ubuntu-latest
    needs: [ docker-prepare-tag, docker-build ]
    steps:
      - run: echo "Grouping job for tests"
    outputs:
      ready: ${{ steps.ready.outputs.ok }}

  integration-tests:
    uses: ./.github/workflows/150-integration-tests.yaml
    needs: [ functional-tests-group ]
    with:
      runs_on: ubuntu-latest
      continue_on_error: true
      service_name: "go42"
      image_tag: ${{ needs.docker-prepare-tag.outputs.tag }}

  load-tests:
    uses: ./.github/workflows/150-load-tests.yaml
    needs: [ functional-tests-group ]
    with:
      runs_on: ubuntu-latest
      continue_on_error: true
      service_name: "go42"
      image_tag: ${{ needs.docker-prepare-tag.outputs.tag }}

  # Stage 7: cleanup

  cleanup:
    uses: ./.github/workflows/160-cleanup.yaml
    needs: [ docker-prepare-tag, security-extra, integration-tests, load-tests ]
    with:
      runs_on: ubuntu-latest
      service_name: "go42"
      image_tag: ${{ needs.docker-prepare-tag.outputs.tag }}
