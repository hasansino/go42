name: gemini

# Simplified Gemini agent with optional GitHub App token support

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

concurrency:
  group: gemini-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  gemini:
    name: gemini
    # 1. Global switch should be set to 'true'
    # 2. Event must be triggered by a user (not a bot)
    # 3. Check if the user have permission to invoke agent
    # 4. Check if triggering event contains '@gemini' keyword
    if: |-
      vars.GEMINI_ENABLE != 'false' &&
      (
        (github.event_name == 'issue_comment' && github.event.comment.user.type != 'Bot') ||
        (github.event_name == 'pull_request_review_comment' && github.event.comment.user.type != 'Bot') ||
        (github.event_name == 'pull_request_review' && github.event.review.user.type != 'Bot') ||
        (github.event_name == 'issues' && github.event.issue.user.type != 'Bot')
      ) &&
      (
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association) ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
      ) &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@gemini')) ||
        (
            github.event_name == 'issues' && 
            (contains(github.event.issue.body, '@gemini') || contains(github.event.issue.title, '@gemini'))
        )
      )
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Prepare AI environment'
        uses: ./.github/actions/ai-prepare-env

      - name: 'Read GEMINI.md prompt'
        id: read_prompt
        run: |-
          set -euo pipefail
          # Read the generated GEMINI.md file
          if [[ -f "GEMINI.md" ]]; then
            GEMINI_PROMPT=$(cat GEMINI.md)
          else
            if [[ "${{ steps.detect_mode.outputs.mode }}" == "review" ]]; then
              GEMINI_PROMPT="You are an expert code reviewer."
            else
              GEMINI_PROMPT="You are a helpful AI assistant."
            fi
          fi
          {
            echo "gemini_prompt<<EOF"
            echo "${GEMINI_PROMPT}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Generate GitHub App Token'
        id: generate_token
        if: ${{ vars.APP_ID }}
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: 'Setup git user'
        if: ${{ !vars.APP_ID }}
        run: |-
          # Only needed when not using GitHub App token
          git config --global user.name 'gemini[bot]'
          git config --global user.email 'gemini[bot]@users.noreply.github.com'

      - name: 'Acknowledge request'
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |-
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            gh api -X POST \
              "/repos/${REPOSITORY}/issues/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || true
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            gh api -X POST \
              "/repos/${REPOSITORY}/pulls/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || true
          fi

      - name: 'Run Gemini'
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
          EVENT_NAME: ${{ github.event_name }}
          EVENT_PAYLOAD: ${{ toJSON(github.event) }}
          ISSUE_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
          IS_PR: ${{ github.event.issue.pull_request != null || github.event.pull_request != null }}
          USER_REQUEST: ${{ github.event.comment.body || github.event.review.body }}
          ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_BASE: ${{ github.event.pull_request.base.ref }}
          PR_HEAD: ${{ github.event.pull_request.head.ref }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          gemini_cli_version: ${{ vars.GEMINI_CLI_VERSION }}
          prompt: ${{ steps.read_prompt.outputs.gemini_prompt }}
          settings: |-
            {
              "maxSessionTurns": 20,
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "mcp/server-github:latest"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ env.GITHUB_TOKEN }}"
                  }
                }
              }
            }
