---

name: gemini

# Gemini agent.

on:
  issue_comment:
    types:
      - created
  pull_request_review_comment:
    types:
      - created
  pull_request_review:
    types:
      - submitted

concurrency:
  group: gemini-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  gemini:
    name: gemini
    # 1. Global switch should be set to 'true'
    # 2. Event must be triggered by a user (not a bot)
    # 3. Check if the user have permission to invoke agent
    # 4. Check if triggering event contains GEMINI_APP_NAME keyword
    # 5. Skip draft PRs
    if: |-
      vars.GEMINI_ENABLE != 'false' &&
      (
        (github.event_name == 'issue_comment' && github.event.comment.user.type != 'Bot') ||
        (github.event_name == 'pull_request_review_comment' && github.event.comment.user.type != 'Bot') ||
        (github.event_name == 'pull_request_review' && github.event.review.user.type != 'Bot') ||
        (github.event_name == 'issues' && github.event.issue.user.type != 'Bot')
      ) &&
      (
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association) ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
      ) &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, format('@{0}', vars.GEMINI_APP_NAME || 'gemini'))) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, format('@{0}', vars.GEMINI_APP_NAME || 'gemini'))) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, format('@{0}', vars.GEMINI_APP_NAME || 'gemini'))) ||
        (
            github.event_name == 'issues' &&
            (contains(github.event.issue.body, format('@{0}', vars.GEMINI_APP_NAME || 'gemini')) || contains(github.event.issue.title, format('@{0}', vars.GEMINI_APP_NAME || 'gemini')))
        )
      ) &&
      (
        github.event.pull_request.draft != true &&
        (github.event.issue.pull_request == null || github.event.issue.draft != true)
      )
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Prepare AI environment'
        uses: ./.github/actions/ai-prepare-env

      - name: 'Read GEMINI.md'
        id: read_prompt
        env:
          PROMPT_FILE: GEMINI.md
        run: |-
          set -euo pipefail
          if [[ -f "${PROMPT_FILE}" ]]; then
            AGENT_PROMPT=$(cat GEMINI.md)
          else
            exit 1
          fi
          {
            echo "agent_promt<<EOF"
            echo "${AGENT_PROMPT}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Read settings.json'
        id: read_settings
        env:
          GEMINI_MAX_TURNS: ${{ vars.GEMINI_MAX_TURNS || '100' }}
          GEMINI_TIMEOUT: ${{ vars.GEMINI_TIMEOUT || '3600' }}
        run: |-
          set -euo pipefail
          if [[ -f ".gemini/settings.json" ]]; then
            SETTINGS=$(jq --arg cwd "${{ github.workspace }}" \
              --arg index "${{ github.workspace }}/ai/index" \
              --arg max_turns "${GEMINI_MAX_TURNS}" \
              --arg timeout "${GEMINI_TIMEOUT}" \
              '.mcpServers.kwb.cwd = $cwd |
              .mcpServers.kwb.args = ["run", "cmd/genkwb/main.go", "-serve", "-index", $index] |
              .maxSessionTurns = ($max_turns | tonumber) |
              .maxSessionDuration = ($timeout | tonumber)' \
              .gemini/settings.json)
          else
            echo "Error: .gemini/settings.json not found" >&2
            exit 1
          fi
          {
            echo "settings<<EOF"
            echo "${SETTINGS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Generate GitHub App Token'
        id: generate_token
        if: ${{ vars.GEMINI_APP_ID }}
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.GEMINI_APP_ID }}
          private-key: ${{ secrets.GEMINI_APP_PRIVATE_KEY }}

      - name: 'Acknowledge request'
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |-
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            gh api -X POST \
              "/repos/${REPOSITORY}/issues/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || true
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            gh api -X POST \
              "/repos/${REPOSITORY}/pulls/comments/${{ github.event.comment.id }}/reactions" \
              -f content='eyes' || true
          fi

      - name: 'Run Gemini'
        uses: google-github-actions/run-gemini-cli@v0
        continue-on-error: true
        id: gemini
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_MCP_KEY: ${{ secrets.GH_MCP_KEY || secrets.GITHUB_TOKEN }}
          GEMINI_MODEL: ${{ vars.GEMINI_MODEL || 'gemini-2.5-pro' }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: ${{ steps.read_prompt.outputs.agent_promt }}
          settings: ${{ steps.read_settings.outputs.settings }}

      - name: 'Handle failure'
        if: failure() || steps.gemini.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
        run: |-
          gh issue comment "${ISSUE_NUMBER}" \
            --body "@${ACTOR} I encountered an error. [workflow logs](https://github.com/${REPOSITORY}/actions/runs/${{ github.run_id }})." \
            --repo "${REPOSITORY}"
