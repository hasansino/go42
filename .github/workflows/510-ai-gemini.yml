name: gemini

on:
  issue_comment:
    types:
      - 'created'
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number || github.event.pull_request.number }}'
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'
  statuses: 'write'

jobs:
  gemini:
    name: gemini
    if: |-
      vars.GEMINI_ENABLE != 'false' && (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        contains(github.event.comment.body, '@gemini') &&
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@gemini') &&
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: 'Prepare AI environment'
        uses: ./.github/actions/ai-prepare-env

      - name: 'Detect mode'
        id: 'detect_mode'
        env:
          COMMENT_BODY: '${{ github.event.comment.body || github.event.review.body }}'
        run: |-
          set -euo pipefail
          
          # Detect if this is a review request
          if [[ "${COMMENT_BODY}" == *"@gemini /review"* ]]; then
            echo "mode=review" >> "${GITHUB_OUTPUT}"
            echo "::notice::Running in review mode"
          else
            echo "mode=chat" >> "${GITHUB_OUTPUT}"
            echo "::notice::Running in chat mode"
          fi

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get context from event (chat mode)'
        id: 'get_context'
        if: steps.detect_mode.outputs.mode == 'chat'
        env:
          EVENT_NAME: '${{ github.event_name }}'
          EVENT_PAYLOAD: '${{ toJSON(github.event) }}'
        run: |-
          set -euo pipefail

          USER_REQUEST=""
          ISSUE_NUMBER=""
          IS_PR="false"

          if [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
            if [[ $(echo "${EVENT_PAYLOAD}" | jq -r .issue.pull_request) != "null" ]]; then
              IS_PR="true"
            fi
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .review.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          fi

          # Clean up user request - remove @gemini mention
          USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/@gemini[[:space:]]*//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          {
            echo "user_request=${USER_REQUEST}"
            echo "issue_number=${ISSUE_NUMBER}"
            echo "is_pr=${IS_PR}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Set up git user for commits'
        if: steps.detect_mode.outputs.mode == 'chat'
        run: |-
          git config --global user.name 'gemini-cli[bot]'
          git config --global user.email 'gemini-cli[bot]@users.noreply.github.com'
      
      # Note: We already checked out the repository at the beginning
      - name: 'Checkout correct branch for PR or issue (chat mode)'
        if: steps.detect_mode.outputs.mode == 'chat'
        run: |-
          if [[ "${{ steps.get_context.outputs.is_pr }}" == "true" ]]; then
            git fetch origin pull/${{ steps.get_context.outputs.issue_number }}/head:pr-branch
            git checkout pr-branch
          fi

      - name: 'Acknowledge request (chat mode)'
        if: steps.detect_mode.outputs.mode == 'chat'
        env:
          GITHUB_ACTOR: '${{ github.actor }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} I've received your request and I'm working on it now! ðŸ¤–"
          if [[ -n "${MESSAGE}" ]]; then
            gh issue comment "${ISSUE_NUMBER}" \
              --body "${MESSAGE}" \
              --repo "${REPOSITORY}"
          fi

      - name: 'Get description (chat mode)'
        id: 'get_description'
        if: steps.detect_mode.outputs.mode == 'chat'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            DESCRIPTION=$(gh pr view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          else
            DESCRIPTION=$(gh issue view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          fi
          {
            echo "description<<EOF"
            echo "${DESCRIPTION}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Get comments (chat mode)'
        id: 'get_comments'
        if: steps.detect_mode.outputs.mode == 'chat'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            COMMENTS=$(gh pr view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          else
            COMMENTS=$(gh issue view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          fi
          {
            echo "comments<<EOF"
            echo "${COMMENTS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Get PR details (review mode)'
        id: 'get_pr_review'
        if: steps.detect_mode.outputs.mode == 'review'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          COMMENT_BODY: '${{ github.event.comment.body || github.event.review.body }}'
          PR_NUMBER: '${{ github.event.issue.number || github.event.pull_request.number }}'
        run: |-
          set -euo pipefail

          echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"

          # Extract additional instructions from comment
          ADDITIONAL_INSTRUCTIONS="$(
            echo "${COMMENT_BODY}" | sed 's/.*@gemini \/review//' | xargs
          )"
          echo "additional_instructions=${ADDITIONAL_INSTRUCTIONS}" >> "${GITHUB_OUTPUT}"

          # Get PR details
          PR_DATA="$(gh pr view "${PR_NUMBER}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)"
          echo "pr_data=${PR_DATA}" >> "${GITHUB_OUTPUT}"

          # Get file changes
          CHANGED_FILES="$(gh pr diff "${PR_NUMBER}" --name-only)"
          {
            echo "changed_files<<EOF"
            echo "${CHANGED_FILES}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Read GEMINI.md prompt'
        id: 'read_prompt'
        run: |-
          set -euo pipefail
          # Read the generated GEMINI.md file
          if [[ -f "GEMINI.md" ]]; then
            GEMINI_PROMPT=$(cat GEMINI.md)
          else
            if [[ "${{ steps.detect_mode.outputs.mode }}" == "review" ]]; then
              GEMINI_PROMPT="You are an expert code reviewer."
            else
              GEMINI_PROMPT="You are a helpful AI assistant."
            fi
          fi
          {
            echo "gemini_prompt<<EOF"
            echo "${GEMINI_PROMPT}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Run Gemini (chat mode)'
        id: 'run_gemini_chat'
        if: steps.detect_mode.outputs.mode == 'chat'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          prompt: '${{ steps.read_prompt.outputs.gemini_prompt }}'
          settings: |-
            {
              "maxSessionTurns": 50,
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }

      - name: 'Run Gemini PR Review (review mode)'
        id: 'run_gemini_review'
        if: steps.detect_mode.outputs.mode == 'review'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          PR_NUMBER: '${{ steps.get_pr_review.outputs.pr_number }}'
          PR_DATA: '${{ steps.get_pr_review.outputs.pr_data }}'
          CHANGED_FILES: '${{ steps.get_pr_review.outputs.changed_files }}'
          ADDITIONAL_INSTRUCTIONS: '${{ steps.get_pr_review.outputs.additional_instructions }}'
          REPOSITORY: '${{ github.repository }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          prompt: '${{ steps.read_prompt.outputs.gemini_prompt }}'
          settings: |-
            {
              "maxSessionTurns": 20,
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "mcp/server-github:latest"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ env.GITHUB_TOKEN }}"
                  }
                }
              },
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
