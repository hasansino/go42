name: security

# Vulnerability / data leak detection.
# @see https://github.com/gitleaks/gitleaks
# @see https://github.com/securego/gosec
# @see https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck
# @see https://github.com/sonatype-nexus-community/nancy
# @see https://codeql.github.com/
# @see https://github.com/google/go-licenses
# @see https://github.com/ossf/scorecard
# @see https://github.com/google/capslock

on:
  workflow_dispatch:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
        description: 'runs_on'
      continue_on_error:
        required: true
        type: boolean
        default: false
        description: 'continue_on_error'
  workflow_call:
    inputs:
      runs_on:
        required: true
        type: string
      continue_on_error:
        required: true
        type: boolean

permissions: {}

jobs:

  gitleaks:
    name: gitleaks
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
    # -----
    steps:
      - name: 'Checkout repository with full history'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run Gitleaks scan'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
          GITLEAKS_CONFIG: etc/gitleaks.toml
          GITLEAKS_VERSION: latest

  gosec:
    name: gosec
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
      security-events: write
    env:
      GO111MODULE: on
    # -----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Run Gosec security scanner'
        uses: securego/gosec@master
        with:
          args: -exclude-generated ./...

  govulncheck:
    name: govulncheck
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
    # -----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Extract Go version'
        run: echo "go_version=$(grep '^go ' go.mod | awk '{print $2}')" >> "$GITHUB_ENV"
      - name: 'Run Go vulnerability check'
        uses: golang/govulncheck-action@v1
        with:
          repo-checkout: false
          go-version-input: ${{ env.go_version }}
          cache: false

  nancy:
    name: nancy
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
    # -----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      # -----
      - name: 'Setup Go'
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: 'Generate Go module list'
        run: go list -json -m all > go.list
      - name: 'Run Nancy vulnerability scanner'
        uses: sonatype-nexus-community/nancy-github-action@main
        with:
          nancyVersion: v1.0.51

  codeql:
    name: codeql
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
      security-events: write
      actions: read
    # -----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      # -----
      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: 'Build'
        uses: github/codeql-action/autobuild@v3
      - name: 'Perform CodeQL analysis'
        uses: github/codeql-action/analyze@v3

  licenses:
    name: licenses
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
    # -----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Check Go licenses'
        uses: joeig/go-licenses-action@v1.1
        with:
          # some packages may miss license files, or they are linked to outside libraries
          # for stricter checks, add `unknown` to this list
          disallowed-types: "forbidden,restricted"

  scorecard:
    name: scorecard
    runs-on: ubuntu-latest  # MUST be hardcoded for OSSF scorecards
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
      id-token: write
      security-events: write
    # ----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Run OSSF Scorecard analysis'
        uses: ossf/scorecard-action@v2.4.2
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          # this updates badge, we want it to reflect only master branch
          publish_results: ${{ github.ref == 'refs/heads/master' }}

  # run capslock only on non-master branches to determine difference
  # between the current branch and master branch in capabilities
  capslock:
    if: github.ref != 'refs/heads/master'
    name: capslock
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      contents: read
    # -----
    steps:
      - name: 'Checkout master branch'
        uses: actions/checkout@v4
        with:
          ref: master
      - name: 'Setup Go'
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: 'Install capslock'
        run: go install github.com/google/capslock/cmd/capslock@latest
      - name: 'Generate master branch capabilities'
        run: capslock -packages ./... -output=json > capabilities.json
      - name: 'Save master capabilities'
        run: mv capabilities.json /tmp/capabilities.json
      # -----
      - name: 'Checkout current branch'
        uses: actions/checkout@v4
      - name: 'Compare capabilities with master'
        run: capslock -packages ./... -output=compare /tmp/capabilities.json
