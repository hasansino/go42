name: load-tests

# Load tests.
# Simulates load on application and records statistics.
# When this workflow is triggered in pull request, it will post statistics to pull request.

on:
  workflow_dispatch:
    inputs:
      runs_on:
        required: true
        type: string
        default: self-hosted
        description: "runs_on"
      continue_on_error:
        required: true
        type: boolean
        default: false
        description: "continue_on_error"
      service_name:
        required: true
        type: string
        default: "go42"
        description: "service_name"
      image_tag:
        required: true
        type: string
        default: "tmp"
        description: "image_tag"
  workflow_call:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
      continue_on_error:
        required: true
        type: boolean
        default: false
      service_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string

permissions:
  packages: read
  pull-requests: write
  issues: write

jobs:
  load-tests:
    # ---
    name: load-tests
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    # ---
    services:
      app:
        image: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
        ports:
          - 8080:8080
          - 50051:50051
        env:
          ENVIRONMENT: ci-load-tests
          SERVER_HTTP_LISTEN: :8080
          SERVER_GRPC_LISTEN: :50051
        options: >-
          --health-cmd "curl -f http://localhost:8080/health-check || exit 1"
          --health-start-period 1s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    # ---
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      - uses: grafana/run-k6-action@v1
        with:
          path: ./tests/load/example_http_test.js
          flags: --summary-export=k6-summary-http.json
      - uses: grafana/run-k6-action@v1
        with:
          path: ./tests/load/example_grpc_test.js
          flags: --summary-export=k6-summary-grpc.json
      # ---
      - uses: actions/upload-artifact@v4
        with:
          name: k6-summary-http
          path: k6-summary-http.json
      - uses: actions/upload-artifact@v4
        with:
          name: k6-summary-grpc
          path: k6-summary-grpc.json
      # ---
      - if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            const resultsHttp = JSON.parse(fs.readFileSync('k6-summary-http.json', 'utf8'));
            const resultsGrpc = JSON.parse(fs.readFileSync('k6-summary-grpc.json', 'utf8'));
            
            const summary = `## Load Test Results
            
            ### HTTP
            
            | Metric | Value |
            |--------|-------|
            | Virtual Users | ${resultsHttp.metrics.vus_max.value} max (${resultsHttp.metrics.vus.min}-${resultsHttp.metrics.vus.max}) |
            | Total Requests | ${resultsHttp.metrics.http_reqs.count} @ ${resultsHttp.metrics.http_reqs.rate.toFixed(2)}/sec |
            | Response Time | Avg: ${resultsHttp.metrics.http_req_duration.avg.toFixed(2)}ms / P95: ${resultsHttp.metrics.http_req_duration["p(95)"].toFixed(2)}ms |
            | Failed Requests | ${resultsHttp.metrics.http_req_failed.passes} (${(resultsHttp.metrics.http_req_failed.value * 100).toFixed(2)}%) |
            | Success Rate | ${(resultsHttp.metrics.checks.passes / (resultsHttp.metrics.checks.passes + resultsHttp.metrics.checks.fails) * 100).toFixed(2)}% |
            
            ### GRPC
            
            | Metric | Value |
            |--------|-------|
            | Virtual Users | ${resultsGrpc.metrics.vus_max.value} max (${resultsGrpc.metrics.vus.min}-${resultsGrpc.metrics.vus.max}) |
            | Total Requests | ${resultsGrpc.metrics.http_reqs.count} @ ${resultsGrpc.metrics.http_reqs.rate.toFixed(2)}/sec |
            | Response Time | Avg: ${resultsGrpc.metrics.http_req_duration.avg.toFixed(2)}ms / P95: ${resultsGrpc.metrics.http_req_duration["p(95)"].toFixed(2)}ms |
            | Failed Requests | ${resultsGrpc.metrics.http_req_failed.passes} (${(resultsGrpc.metrics.http_req_failed.value * 100).toFixed(2)}%) |
            | Success Rate | ${(resultsGrpc.metrics.checks.passes / (resultsGrpc.metrics.checks.passes + resultsGrpc.metrics.checks.fails) * 100).toFixed(2)}% |
            
            [View full results](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
