name: load-tests

# Load tests.
# Simulates load on application and records statistics.

on:
  workflow_call:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
      continue_on_error:
        required: true
        type: boolean
        default: false
      service_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string

permissions:
  packages: read

jobs:
  load-tests:
    # ---
    name: load-tests
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    # ---
    services:
      app:
        image: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
        ports:
          - 8080:8080
        env:
          ENVIRONMENT: ci-load-tests
        options: >-
          --health-cmd "curl -f http://localhost:8080/health-check || exit 1"
          --health-start-period 1s
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    # ---
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      - uses: grafana/run-k6-action@v1
        with:
          path: ./tests/load/*.js
          flags: --summary-export=k6-summary.json
      # ---
      - uses: actions/upload-artifact@v4
        with:
          name: k6-summary
          path: k6-summary.json
      # ---
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('k6-summary.json', 'utf8'));
            const summary = `## Performance Test Results
            
            - Virtual Users: ${results.metrics.vus.values.max}
            - Request Rate: ${results.metrics.http_reqs.values.rate.toFixed(2)}/sec
            - Avg Response Time: ${results.metrics.http_req_duration.values.avg.toFixed(2)}ms
            - P95 Response Time: ${results.metrics.http_req_duration.values.p(95).toFixed(2)}ms
            - Failed Requests: ${results.metrics.http_req_failed.values.count}
            
            [View full results](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
